[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/assert/index.js",
    "content": "/**\n * Asserts help you to make sure, the buffer you're parsing\n * is in the correct format. These assertions are like chai, throwing an error\n * when an assertion doesn't hold.\n *\n * These functions won't modify {@link Corrode#vars}.\n */\n\nimport lodash from 'lodash';\n\n/**\n * assert strict equal single value\n * @param {string} name   key of the value to test\n * @param {mixed}  value  comparision\n * @throws TypeError assertion-error\n */\nexport function equal(name, value){\n    if(this.vars[name] !== value){\n        throw new TypeError(`Expected ${value}, found ${this.vars[name]} at ${name}`);\n    }\n}\n\n/**\n * assert deep equality each value in Object|Array\n * @param {string} name     key of the object|array to test\n * @param {mixed} testValue comparision, undefined for auto-detect\n * @throws TypeError assertion-error\n */\nexport function allEqual(name, testValue){\n    let values = this.vars[name];\n    if(!Array.isArray(values)){\n        values = lodash.values(values);\n    }\n\n    if(typeof testValue === 'undefined'){\n        testValue = values[0];\n    }\n\n    const notEqualObjects = values.filter(varValue => varValue !== testValue);\n    if(notEqualObjects.length !== 0){\n        throw new TypeError(`Expected values in ${JSON.stringify(this.vars[name])} to all be ${testValue}`);\n    }\n}\n\n/**\n * assert equality objects\n * @param {string} name  key of the object to test\n * @param {object} value comparision\n * @throws TypeError assertion-error\n */\nexport function deepEqual(name, value){\n    const binaryValue = this.vars[name];\n    if(!lodash.isEqual(binaryValue, value)){\n        throw new TypeError(`Expected ${JSON.stringify(value)}, found ${JSON.stringify(binaryValue)}`);\n    }\n}\n\n/**\n * assert array|object to contain item\n * @param {string} name key of the value to test\n * @param {array|object} arr comparision\n * @throws TypeError assertion-error\n */\nexport function includes(name, arr){\n    if(!lodash.includes(arr, this.vars[name])){\n        throw new TypeError(`Expected ${JSON.stringify(arr)} to include ${this.vars[name]}`);\n    }\n}\n\n/**\n * assert value to be within the bounds of an array\n * @param {string} name  key of the number to test\n * @param {array} value comparision\n * @throws TypeError assertion-error\n */\nexport function inBounds(name, value){\n    const index = this.vars[name];\n\n    if(index < 0 || index >= value.length){\n        throw new TypeError(`Expected Array of ${value.length} items to be at least ${index} long`);\n    }\n}\n\n/**\n * assert value via callback\n * @param {string}   name   key of the value to test\n * @param {function} fn     callback\n * @param {string}   testname optional test-name\n * @throws TypeError assertion-error\n */\nexport function callback(name, fn, testname = fn.name){\n    if(!fn(this.vars[name])){\n        throw new TypeError(`Callback failed at ${testname}(${this.vars[name]})`);\n    }\n}\n\n/**\n * assert array to be a given length\n * @param {string}        name   key of the value to test\n * @param {number|string} length comparision\n * @throws TypeError assertion-error\n */\nexport function arrayLength(name, length){\n    // try to get the length param from the vars if available\n    if(typeof length === 'string' && this.vars[length] !== 'undefined'){\n        length = this.vars[length];\n    }\n\n    if(typeof this.vars[name] === 'undefined' || this.vars[name].length !== length){\n        throw new TypeError(`Expected array to have a length of ${length}, has ${this.vars[name].length}`);\n    }\n}\n\n/**\n * asserts a variable exists in the first place\n * @param {string}   name   key of the value to test\n * @throws TypeError assertion-error\n */\nexport function exists(name){\n    if(typeof this.vars[name] === 'undefined'){\n        throw new TypeError(`Expected var ${name} to exist`);\n    }\n}\n\n/**\n * asserts a variable matches a given bitmask\n * @param  {string} name         key of the value to test\n * @param  {number} mask         bitmask to match\n * @param  {boolean} assertMatch true: should match; false: shouldn't match\n * @throws TypeError assertion-error\n */\nexport function bitmask(name, mask, assertMatch = true){\n    const val = this.vars[name];\n\n    if((val & mask) === mask === !assertMatch){\n        throw new TypeError(`Expected var ${name} to ${assertMatch ? '' : 'not '}match bitmask (value: 0b${val.toString(2)} assert: 0b${mask.toString(2)})`);\n    }\n}\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/assert/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "equal",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~equal",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{equal}",
    "description": "assert strict equal single value",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      },
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "comparision"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "allEqual",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~allEqual",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{allEqual}",
    "description": "assert deep equality each value in Object|Array",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the object|array to test"
      },
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "testValue",
        "description": "comparision, undefined for auto-detect"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "deepEqual",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~deepEqual",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{deepEqual}",
    "description": "assert equality objects",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the object to test"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "comparision"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "includes",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~includes",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{includes}",
    "description": "assert array|object to contain item",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      },
      {
        "nullable": null,
        "types": [
          "array",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "comparision"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "inBounds",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~inBounds",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{inBounds}",
    "description": "assert value to be within the bounds of an array",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the number to test"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "comparision"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "callback",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~callback",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{callback}",
    "description": "assert value via callback",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "callback"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "testname",
        "description": "optional test-name"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "arrayLength",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~arrayLength",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{arrayLength}",
    "description": "assert array to be a given length",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "comparision"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "exists",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~exists",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{exists}",
    "description": "asserts a variable exists in the first place",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "bitmask",
    "memberof": "src/assert/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/assert/index.js~bitmask",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/assert/index.js",
    "importStyle": "{bitmask}",
    "description": "asserts a variable matches a given bitmask",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "key of the value to test"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "bitmask to match"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "assertMatch",
        "description": "true: should match; false: shouldn't match"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError assertion-error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/base.js",
    "content": "import VariableStack from './variable-stack';\nimport BufferList from 'bl';\nimport { Transform } from 'readable-stream';\nimport { cloneDeep, isPlainObject } from 'lodash';\n\nconst LITTLE_ENDIAN = 'LE';\nconst BIG_ENDIAN = 'BE';\nconst POW_32 = Math.pow(2, 32);\nconst LOOP_VAR_SYMBOL = Symbol('loop-variable');\n\n/**\n * This class lies at the very base of this library.\n *\n * It's responsible for reading variables, looping and tapping values and other\n * more or less low-level stuff. It extends the {Transform}-stream, so you can\n * pipe other streams into your corrode instance. This makes corrode an efficient\n * library for even huge files. Unless necessary or explicitly wanted by the user,\n * corrode flushes it's internal buffer {@link Corrode#streamBuffer} asap.\n *\n * The library doesn't work directly when called. If you call e.g.\n * {@link Corrode#uint32be} there won't be a direct read from a given buffer.\n * Instead there will be a new *job*, added to {@link Corrode#jobs}.\n * This array of jobs is responsible for managing the work to be done\n * once data flows. This way, it's possible to insert new jobs on the fly\n * and making for an imperative way of using this library.\n *\n * Corrode will process the given stream as long as long as there's new chunks\n * and jobs. Once either of these drain, corrode will stop and clean possibly\n * remaining jobs (i.e. remove all read-jobs).\n *\n * In fact CorrodeBase can be used as a standalone-library, if low-level is your thing.\n */\nexport default class CorrodeBase extends Transform {\n\n    /**\n     * Defaults Object for available options\n     * {@link CorrodeBase#constructor}\n     * @access public\n     * @type {Object}\n     */\n    static defaults = {\n        endianness: LITTLE_ENDIAN,\n        loopIdentifier: LOOP_VAR_SYMBOL,\n        encoding: 'utf8',\n        finishJobsOnEOF: true,\n        anonymousLoopDiscardDeep: false,\n        strictObjectMode: true\n    };\n\n    /**\n     * static constant for little endian\n     * @access public\n     * @type {string}\n     */\n    static LITTLE_ENDIAN = LITTLE_ENDIAN;\n\n    /**\n     * static constant for big endian\n     * @access public\n     * @type {string}\n     */\n    static BIG_ENDIAN = BIG_ENDIAN;\n\n    /**\n     * array holding the jobs which are to be processed\n     * @access public\n     * @type {Array<Object>}\n     */\n    jobs = [];\n\n    /**\n     * the VariableStack holding the layers and variables of this instance\n     * @access public\n     * @type {VariableStack}\n     */\n    varStack = new VariableStack();\n\n    /**\n     * internal buffer for stream-chunks not yet processable\n     * @access public\n     * @type {BufferList}\n     */\n    streamBuffer = new BufferList();\n\n    /**\n     * offset in the whole piped stream\n     * @access public\n     * @type {Number}\n     */\n    streamOffset = 0;\n\n    /**\n     * offset in the current running chunk ({@link CorrodeBase#streamBuffer})\n     * @access public\n     * @type {Number}\n     */\n    chunkOffset = 0;\n\n    /**\n     * indicates whether only pops are getting processed\n     * @access public\n     * @type {Boolean}\n     */\n    isUnwinding = false;\n\n    /**\n     * indicates whether automatic flushes are disabled\n     * @access public\n     * @type {Boolean}\n     */\n    isSeeking = false;\n\n    /**\n     * available primitve jobs. these are the functions really reading data from\n     * the buffer.\n     * @access public\n     * @type {Object}\n     */\n    primitveMap = {\n        int8: () => this.streamBuffer.readInt8(this.chunkOffset),\n        uint8: () => this.streamBuffer.readUInt8(this.chunkOffset),\n\n        int16: job => this.streamBuffer[`readInt16${job.endianness}`](this.chunkOffset),\n        uint16: job => this.streamBuffer[`readUInt16${job.endianness}`](this.chunkOffset),\n\n        int32: job => this.streamBuffer[`readInt32${job.endianness}`](this.chunkOffset),\n        uint32: job => this.streamBuffer[`readUInt32${job.endianness}`](this.chunkOffset),\n\n        float: job => this.streamBuffer[`readFloat${job.endianness}`](this.chunkOffset),\n        double: job => this.streamBuffer[`readDouble${job.endianness}`](this.chunkOffset),\n\n        int64: job => {\n            const lo = this.streamBuffer[`readUInt32${job.endianness}`](this.chunkOffset + (job.endianness === LITTLE_ENDIAN ? 0 : 4));\n            const hi = this.streamBuffer[`read${job.type === 'uint64' ? 'U' : ''}Int32${job.endianness}`](this.chunkOffset + (job.endianness === LITTLE_ENDIAN ? 4 : 0));\n            return (POW_32 * hi) + lo;\n        },\n        uint64: job => this.primitveMap.int64(job)\n    };\n\n    /**\n     * get variables of the current stack\n     * @return {Object|*} topmost value\n     */\n    get vars(){\n        return this.varStack.value;\n    }\n\n    /**\n     * replace the current value\n     * @param  {Object|*} val new value\n     */\n    set vars(val){\n        this.varStack.value = val;\n    }\n\n    /**\n     * options default to {@link Corrode.defaults}, also accepts options\n     * for {@link Transform#constructor}.\n     * @param {string}  options.endianness=CorrodeBase#LITTLE_ENDIAN endianness, when none is explicitly given by the job\n     * @param {*}       options.loopIdentifier=Symbol(loop-variable)    identifier of the temporary variable used internally for loops\n     * @param {string}  options.encoding='utf8'                      default encoding, when none is explicitly given by the job\n     * @param {boolean} options.finishJobsOnEOF=true                 whether to finish all remaining jobs on stream-end or leave the corrode-instance in an unfinished state with possibly many unresolved functions and unpredictable state (see tests)\n     * @param {boolean} options.anonymousLoopDiscardDeep=false       when anonymous loop-jobs get discarded, the original state which gets restored is either a shallow copy or a deep copy of the original object (see tests)\n     * @param {boolean} options.strictObjectMode=true                whether to prevent none-object values from being pushed onto {@link CorrodeBase#vars} (catches mistakes)\n     */\n    constructor(options){\n        super({ ...options, objectMode: true, encoding: null });\n\n        /** @type {Object} options default-options overwritten by user options */\n        this.options = {\n            ...CorrodeBase.defaults,\n            ...options\n        };\n    }\n\n    /**\n     * add a new chunk to the internal buffer and process remaining jobs\n     * this TransformStream won't call the push-method as it is not able\n     * to guarantee correct ouptut while still reading data. this depends not on\n     * corrode, but on the way you use it.\n     * @implements {Transform#_transform}\n     * @access private\n     */\n    _transform(chunk, encoding, done){\n        this.streamBuffer.append(chunk);\n\n        this.jobLoop();\n\n        // isSeeking prevents internal flushes\n        // (useful for going back to a previous chunk)\n        if(!this.isSeeking){\n            this.streamBuffer.consume(this.chunkOffset);\n            /**\n             * offset in the current running chunk ({@link CorrodeBase#streamBuffer})\n             * @access public\n             * @type {Number}\n             */\n            this.chunkOffset = 0;\n        }\n\n        // the callback is called synchronously, meaning any errors\n        // working up in the jobLoop (asserts, etc) get thrown in the main\n        // event-loop. that's a bug:\n        // @link https://github.com/screeny05/corrode/issues/24\n        return done();\n    }\n\n    /**\n     * finish remaining jobs if finishJobsOnEOF is enabled\n     * @implements {Transform#_flush}\n     * @access private\n     */\n    _flush(done){\n        if(this.options.finishJobsOnEOF){\n            this.finishRemainingJobs();\n        }\n\n        setImmediate(done);\n    }\n\n    /**\n     * internal function to process the array of jobs still remaing.\n     * this function is synchronous. this is due to the fact of keeping things\n     * more simple. if you intend to use this library expecting taps and loops\n     * to work async you're invited to create an issue to inform me of the\n     * need for this kind of behaviour. Until then corrode should satisfy most use cases.\n     *\n     * if you desperately need async behaviour when parsing data, i'd recommend\n     * doing that after corrode has finished parsing the buffer, separately.\n     *\n     * @throws {Error} assertion-errors, runtime-errors\n     */\n    jobLoop(){\n        // {@link CorrodeBase#jobs} get's manipulated by {@link CorrodeBase#jobLoop}\n        while(this.jobs.length > 0){\n            const job = this.jobs[0];\n            const remainingBuffer = this.streamBuffer.length - this.chunkOffset;\n\n            if(job.type === 'push'){\n                // in strictObjectMode the variable being pushed has to be a real object.\n                // this prevents accidentaly pushing numbers, strings, etc.\n                if(this.options.strictObjectMode && typeof this.vars[job.name] !== 'undefined' && !isPlainObject(this.vars[job.name])){\n                    throw new TypeError(`Can't push into a non-object value (${job.name}) in strictObjectMode`);\n                }\n\n                this.jobs.shift();\n                this.varStack.push(job.name, job.value);\n                continue;\n\n            } else if(job.type === 'pop'){\n                this.jobs.shift();\n                this.varStack.pop();\n                continue;\n\n            } else if(job.type === 'tap'){\n                this.jobs.shift();\n\n                const unqueue = this.queueJobs();\n\n                if(typeof job.name !== 'undefined'){\n                    // if the tap has a name, push a new var-layer\n                    this\n                        .push(job.name)\n                        .tap(job.callback, job.args)\n                        .pop();\n\n                } else {\n                    // otherwise we continue working on the current layer\n                    job.callback.apply(this, job.args);\n                }\n\n                unqueue();\n                continue;\n\n            } else if(job.type === 'loop'){\n                // wait for more data before executing a loop on an empty buffer.\n                // this way empty objects are not being added when the stream finishes\n                if(remainingBuffer === 0){\n                    break;\n                }\n\n                if(job.finished){\n                    this.jobs.shift();\n                    continue;\n                }\n\n                const loopIdentifier = this.options.loopIdentifier;\n                const unqueue = this.queueJobs();\n\n                if(typeof job.name !== 'undefined'){\n                    if(typeof this.vars[job.name] === 'undefined'){\n                        this.vars[job.name] = [];\n                    }\n\n                    this\n                        .tap(loopIdentifier, job.callback, [job.finish, job.discard, job.iteration++])\n                        .tap(function(){\n                            const loopResult = this.vars[loopIdentifier];\n\n                            // push vars only if job isn't discarded and yielded vars\n                            // (no empty objects this way)\n                            if(!job.discarded && (!isPlainObject(loopResult) || Object.keys(loopResult).length > 0)){\n                                this.vars[job.name].push(loopResult);\n                            }\n                            job.discarded = false;\n                            delete this.vars[loopIdentifier];\n                        });\n\n                } else {\n                    // make copy, in case the user discards the result\n                    // {@link CorrodeBase#options.anonymousLoopDiscardDeep}\n                    if(this.options.anonymousLoopDiscardDeep){\n                        job[loopIdentifier] = cloneDeep(this.vars);\n                    } else {\n                        job[loopIdentifier] = { ...this.vars };\n                    }\n\n                    this\n                        .tap(job.callback, [job.finish, job.discard, job.iteration++])\n                        .tap(function(){\n                            if(job.discarded && typeof job[loopIdentifier] !== 'undefined'){\n                                this.vars = job[loopIdentifier];\n                            }\n                            job.discarded = false;\n                            delete job[loopIdentifier];\n                        });\n                }\n\n                unqueue();\n                continue;\n            }\n\n            // determine length of next job\n            const length = typeof job.length === 'string' ? this.vars[job.length] : job.length;\n\n            // only valid numbers can be used as length\n            if(typeof length !== 'number'){\n                throw new TypeError(`Cannot find a valid length for job ${job.name}, dereferenced length is ${JSON.stringify(length)}`);\n            }\n\n            // break on unsufficient streamBuffer-length (wait if not unwinding yet)\n            if(this.streamBuffer.length - this.chunkOffset < length){\n                if(this.isUnwinding && this.jobs.length > 0){\n                    // unwind loop, by removing the loop job\n                    this.removeReadJobs();\n                    continue;\n                }\n\n                break;\n            }\n\n            if(job.type === 'buffer'){\n                this.jobs.shift();\n                this.vars[job.name] = this.streamBuffer.slice(this.chunkOffset, this.chunkOffset + length);\n                this._moveOffset(length);\n                continue;\n\n            } else if(job.type === 'string'){\n                this.jobs.shift();\n                this.vars[job.name] = this.streamBuffer.toString(job.encoding, this.chunkOffset, this.chunkOffset + length);\n                this._moveOffset(length);\n                continue;\n\n            } else if(job.type === 'skip'){\n                this.jobs.shift();\n                if(this.streamOffset + length < 0){\n                    throw new RangeError('cannot skip below 0');\n                }\n                this._moveOffset(length);\n                continue;\n\n            } else if(typeof this.primitveMap[job.type] === 'function'){\n                this.vars[job.name] = this.primitveMap[job.type](job);\n                this.jobs.shift();\n                this._moveOffset(length);\n            } else {\n                throw new Error(`invalid job type '${job.type}'`);\n            }\n        }\n    }\n\n    /**\n     * re-starts the jobLoop with the job-list cleaned from any read jobs\n     * {@link CorrodeBase#removeReadJobs}\n     * {@link CorrodeBase#isUnwinding}\n     */\n    finishRemainingJobs(){\n        /**\n         * indicates whether only pops are getting processed\n         * @access public\n         * @type {Boolean}\n         */\n        this.isUnwinding = true;\n        this.removeReadJobs();\n        this.jobLoop();\n        this.varStack.popAll();\n    }\n\n    /**\n     * purges all jobs from the job-queue, which need to read from the stream\n     */\n    removeReadJobs(){\n        const filteredJobs = this.jobs\n            .slice()\n            .filter(job => job.type === 'pop' || (job.type === 'tap' && !job.name));\n\n        this.jobs.splice(0);\n        this.jobs.push(...filteredJobs);\n    }\n\n    /**\n     * utility method to move both {@link CorrodeBase#chunkOffset} and\n     * {@link CorrodeBase#streamOffset} by a given amount of bytes\n     * @access private\n     */\n    _moveOffset(by){\n        this.chunkOffset += by;\n        /**\n         * offset in the whole piped stream\n         * @access public\n         * @type {Number}\n         */\n        this.streamOffset += by;\n    }\n\n    /**\n     * remove all jobs from {@link CorrodeBase#jobs} with the ability to re-add them back later.\n     * @returns {function} function to append all queued jobs back onto the jobs-array (borrowed from redux)\n     * @example\n     *   + [\n     *   |   { type: 'push', name: 'struct', fn },\n     *   |   { type: 'uint8', name: 'var' ' }\n     *   | ]\n     *   |\n     *   | jobLoop - iteration\n     *   |\n     *   | var unqueueJobs = queJobs();\n     *   |\n     *   | []\n     *   |\n     *   | fn();\n     *   |\n     *   | [\n     *   |   { type: 'uint8', name: 'strvar' }\n     *   | ]\n     *   |\n     *   | unqueueJobs();\n     *   |\n     *   | [\n     *   |   { type: 'uint8', name: 'strvar' },\n     *   |   { type: 'uint8', name: 'var'   }\n     *   v ]\n     */\n    queueJobs(){\n        const queuedJobs = this.jobs;\n\n        // empty jobs\n        this.jobs = [];\n\n        // unqueue-method\n        return () => this.jobs = this.jobs.concat(queuedJobs);\n    }\n\n    /**\n     * utility method to push a new job onto the job-array\n     * @access private\n     * @return {CorrodeBase} this\n     */\n    _pushJob(name, type, length, endianness){\n        this.jobs.push(typeof name === 'object' ? name : {\n            name,\n            type,\n            length,\n            endianness\n        });\n        return this;\n    }\n\n    /**\n     * push a tap-job onto the job-array\n     * a tap-job is a special kind of job allowing the developer to peek into\n     * the current variables and creating more complex structures and behaviour\n     * based on available information.\n     * @param {string} [name] name of the new variable-layer. if none is provided, the current layer will be used\n     * @param {function(...args: *)} callback called when this job is reached\n     * @param {Array} args array of possible arguments being passed to the callback\n     * @return {CorrodeBase} this\n     */\n    tap(name, callback, args){\n        if(typeof name === 'function'){\n            args = callback;\n            callback = name;\n            name = undefined;\n        }\n\n        return this._pushJob({\n            name,\n            type: 'tap',\n            args,\n            callback\n        });\n    }\n\n    /**\n     * push a loop-job onto the job-array\n     * a loop-job is a special kind of job allowing the developer to create loops\n     * in the current job-array. this allows for iteration, seeking and more\n     * complex behaviours\n     * @param {string} [name] name of the new variable-layer. if none is provided, the current layer will be used\n     * @param {function(end: function, discard: function, i: number)} callback called until `end()` is called.\n     *        `end(true)` can be used to end and discard the current loop.\n     *        `discard()` can be used to reset the current layer ({@link CorrodeBase#options.anonymousLoopDiscardDeep}).\n     *        `i` is the current iteration count\n     * @return {CorrodeBase} this\n     */\n    loop(name, callback){\n        if(typeof name === 'function'){\n            callback = name;\n            name = undefined;\n        }\n\n        const loopJob = {\n            name,\n            type: 'loop',\n            callback,\n            finished: false,\n            discarded: false,\n            iteration: 0\n        };\n\n        loopJob.finish = function(discard){\n            loopJob.finished = true;\n            loopJob.discarded = Boolean(discard);\n        };\n\n        loopJob.discard = function(){\n            loopJob.discarded = true;\n        };\n\n        return this._pushJob(loopJob);\n    }\n\n    /**\n     * push a skip-job onto the job-array\n     * skip-jobs allow the developer to skip a given number of bytes.\n     * If the amount of bytes exceeds the current available byte-count in the\n     * internal buffer {@link CorrodeBase#streamBuffer} the job will wait for enough\n     * data. If this data won't come the job gets aborted and corrode ends.\n     * If you want to skip a negative amount of bytes you have to disable auto-flushing.\n     * this can be done by setting {@link CorrodeBase#isSeeking} to `true`.\n     * @param {number|string} length how many bytes to skip. Given a string, corrode will try to find a variable with the given string in the current layer\n     * @return {CorrodeBase} this\n     */\n    skip(length){\n        return this._pushJob({\n            type: 'skip',\n            length\n        });\n    }\n\n    /**\n     * push a pop-job onto the job-array\n     * the pop-job pops a layer from {@link CorrodeBase#varStack}.\n     * this most probably doesn't have to get called manually, as\n     * {@link CorrodeBase#tap} and {@link CorrodeBase#loop} will do this automatically\n     * @return {CorrodeBase} this\n     */\n    pop(){\n        return this._pushJob({\n            type: 'pop'\n        });\n    }\n\n    /**\n     * push a push-job onto the job-array\n     * the push-job pushes a new layer onto {@link CorrodeBase#varStack}.\n     * this most probably doesn't have to get called manually, as\n     * {@link CorrodeBase#tap} and {@link CorrodeBase#loop} will do this automatically\n     * @param {string} name name of the new layer\n     * @param {*} [value={}] value of the new layer (default is from {@link VariableStack})\n     * @return {CorrodeBase} this\n     */\n    push(name, value){\n        return this._pushJob({\n            type: 'push',\n            name,\n            value\n        });\n    }\n\n    /**\n     * pushes a buffer-job onto the job-array\n     * the buffer-job will read a buffer with the given length starting at the\n     * current offset {@link CorrodeBase#bufferOffset}.\n     * The returned Buffer will be a slice (not a copy) of the underlying {@link CorrodeBase#streamBuffer}\n     * @param {string} name name of the buffer-variable\n     * @param {number|string} length length of the buffer in bytes. Given a string, corrode will try to find a variable with the given string in the current layer\n     * @return {CorrodeBase} this\n     */\n    buffer(name, length){\n        return this._pushJob({\n            name,\n            type: 'buffer',\n            length\n        });\n    }\n\n    /**\n     * pushes a string-job onto the job-array\n     * the string-job will read a string with the given length starting at the\n     * current offset {@link CorrodeBase#bufferOffset}\n     * @param {string} name name of the string-variable\n     * @param {number|string} length length of the string in bytes (_not characters_). Given a string, corrode will try to find a variable with the given string in the current layer\n     * @param {string} [encoding=CorrodeBase#options.encoding] encoding encoding used to decode the string, defaults to 'utf8'.\n     *                 available encodings can be found here https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n     * @return {CorrodeBase} this\n     */\n    string(name, length, encoding = this.options.encoding){\n        return this._pushJob({\n            name,\n            type: 'string',\n            length,\n            encoding\n        });\n    }\n\n    /**\n     * push a int8 (signed) job onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int8(name){ return this._pushJob(name, 'int8', 1, this.options.endianness); }\n\n    /**\n     * push a int8 (signed) job onto the job-array\n     * @deprecated int8 needs no endianness, use int8() instead\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int8le(name){ return this._pushJob(name, 'int8', 1, LITTLE_ENDIAN); }\n\n    /**\n     * push a int8 (signed) job onto the job-array\n     * @deprecated int8 needs no endianness, use int8() instead\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int8be(name){ return this._pushJob(name, 'int8', 1, BIG_ENDIAN); }\n\n    /**\n     * push a uint8 (unsigned) job onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint8(name){ return this._pushJob(name, 'uint8', 1, this.options.endianness); }\n\n    /**\n     * push a uint8 (unsigned) job onto the job-array\n     * @deprecated uint8 needs no endianness, use uint8() instead\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint8le(name){ return this._pushJob(name, 'uint8', 1, LITTLE_ENDIAN); }\n\n    /**\n     * push a uint8 (unsigned) job onto the job-array\n     * @deprecated uint8 needs no endianness, use uint8() instead\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint8be(name){ return this._pushJob(name, 'uint8', 1, BIG_ENDIAN); }\n\n\n    /**\n     * push a int16 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int16(name){ return this._pushJob(name, 'int16', 2, this.options.endianness); }\n\n    /**\n     * push a int16 (signed) job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int16le(name){ return this._pushJob(name, 'int16', 2, LITTLE_ENDIAN); }\n\n    /**\n     * push a int16 (signed) job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int16be(name){ return this._pushJob(name, 'int16', 2, BIG_ENDIAN); }\n\n    /**\n     * push a uint16 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint16(name){ return this._pushJob(name, 'uint16', 2, this.options.endianness); }\n\n    /**\n     * push a uint16 (unsigned) job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint16le(name){ return this._pushJob(name, 'uint16', 2, LITTLE_ENDIAN); }\n\n    /**\n     * push a uint16 (unsigned) job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint16be(name){ return this._pushJob(name, 'uint16', 2, BIG_ENDIAN); }\n\n\n    /**\n     * push a int32 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int32(name){ return this._pushJob(name, 'int32', 4, this.options.endianness); }\n\n    /**\n     * push a int32 (signed) job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int32le(name){ return this._pushJob(name, 'int32', 4, LITTLE_ENDIAN); }\n\n    /**\n     * push a int32 (signed) job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int32be(name){ return this._pushJob(name, 'int32', 4, BIG_ENDIAN); }\n\n    /**\n     * push a uint32 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint32(name){ return this._pushJob(name, 'uint32', 4, this.options.endianness); }\n\n    /**\n     * push a uint32 (unsigned) job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint32le(name){ return this._pushJob(name, 'uint32', 4, LITTLE_ENDIAN); }\n\n    /**\n     * push a uint32 (unsigned) job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint32be(name){ return this._pushJob(name, 'uint32', 4, BIG_ENDIAN); }\n\n\n    /**\n     * push a int64 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int64(name){ return this._pushJob(name, 'int64', 8, this.options.endianness); }\n\n    /**\n     * push a int64 (signed) job with little endianness onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int64le(name){ return this._pushJob(name, 'int64', 8, LITTLE_ENDIAN); }\n\n    /**\n     * push a int64 (signed) job with big endianness onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    int64be(name){ return this._pushJob(name, 'int64', 8, BIG_ENDIAN); }\n\n    /**\n     * push a uint64 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint64(name){ return this._pushJob(name, 'uint64', 8, this.options.endianness); }\n\n    /**\n     * push a uint64 (unsigned) job with little endianness onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint64le(name){ return this._pushJob(name, 'uint64', 8, LITTLE_ENDIAN); }\n\n    /**\n     * push a uint64 (unsigned) job with big endianness onto the job-array\n     * note that in64 may be unprecise, due to number-values being double in js\n     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    uint64be(name){ return this._pushJob(name, 'uint64', 8, BIG_ENDIAN); }\n\n\n    /**\n     * push a float job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    float(name){ return this._pushJob(name, 'float', 4, this.options.endianness); }\n\n    /**\n     * push a float job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    floatle(name){ return this._pushJob(name, 'float', 4, LITTLE_ENDIAN); }\n\n    /**\n     * push a float job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    floatbe(name){ return this._pushJob(name, 'float', 4, BIG_ENDIAN); }\n\n\n    /**\n     * push a double job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    double(name){return this._pushJob(name, 'double', 8, this.options.endianness); }\n\n    /**\n     * push a double job with little endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    doublele(name){return this._pushJob(name, 'double', 8, LITTLE_ENDIAN); }\n\n    /**\n     * push a double job with big endianness onto the job-array\n     * @param {string} name name of the variable to be created\n     * @return {CorrodeBase} this\n     */\n    doublebe(name){return this._pushJob(name, 'double', 8, BIG_ENDIAN); }\n}\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "LITTLE_ENDIAN",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~LITTLE_ENDIAN",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "BIG_ENDIAN",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~BIG_ENDIAN",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "POW_32",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~POW_32",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "LOOP_VAR_SYMBOL",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~LOOP_VAR_SYMBOL",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "CorrodeBase",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~CorrodeBase",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/base.js",
    "importStyle": "CorrodeBase",
    "description": "This class lies at the very base of this library.\n\nIt's responsible for reading variables, looping and tapping values and other\nmore or less low-level stuff. It extends the {Transform}-stream, so you can\npipe other streams into your corrode instance. This makes corrode an efficient\nlibrary for even huge files. Unless necessary or explicitly wanted by the user,\ncorrode flushes it's internal buffer {@link Corrode#streamBuffer} asap.\n\nThe library doesn't work directly when called. If you call e.g.\n{@link Corrode#uint32be} there won't be a direct read from a given buffer.\nInstead there will be a new *job*, added to {@link Corrode#jobs}.\nThis array of jobs is responsible for managing the work to be done\nonce data flows. This way, it's possible to insert new jobs on the fly\nand making for an imperative way of using this library.\n\nCorrode will process the given stream as long as long as there's new chunks\nand jobs. Once either of these drain, corrode will stop and clean possibly\nremaining jobs (i.e. remove all read-jobs).\n\nIn fact CorrodeBase can be used as a standalone-library, if low-level is your thing.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "readable-stream~Transform"
    ]
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "defaults",
    "memberof": "src/base.js~CorrodeBase",
    "static": true,
    "longname": "src/base.js~CorrodeBase.defaults",
    "access": "public",
    "description": "Defaults Object for available options\n{@link CorrodeBase#constructor}",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "LITTLE_ENDIAN",
    "memberof": "src/base.js~CorrodeBase",
    "static": true,
    "longname": "src/base.js~CorrodeBase.LITTLE_ENDIAN",
    "access": "public",
    "description": "static constant for little endian",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "BIG_ENDIAN",
    "memberof": "src/base.js~CorrodeBase",
    "static": true,
    "longname": "src/base.js~CorrodeBase.BIG_ENDIAN",
    "access": "public",
    "description": "static constant for big endian",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "jobs",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#jobs",
    "access": "public",
    "description": "array holding the jobs which are to be processed",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "varStack",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#varStack",
    "access": "public",
    "description": "the VariableStack holding the layers and variables of this instance",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "VariableStack"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "streamBuffer",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#streamBuffer",
    "access": "public",
    "description": "internal buffer for stream-chunks not yet processable",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "BufferList"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "streamOffset",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#streamOffset",
    "access": "public",
    "description": "offset in the whole piped stream",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "chunkOffset",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#chunkOffset",
    "access": "public",
    "description": "offset in the current running chunk ({@link CorrodeBase#streamBuffer})",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "isUnwinding",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#isUnwinding",
    "access": "public",
    "description": "indicates whether only pops are getting processed",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "isSeeking",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#isSeeking",
    "access": "public",
    "description": "indicates whether automatic flushes are disabled",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "primitveMap",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#primitveMap",
    "access": "public",
    "description": "available primitve jobs. these are the functions really reading data from\nthe buffer.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "vars",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#vars",
    "access": "public",
    "description": "get variables of the current stack",
    "lineNumber": 144,
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "*"
      ],
      "spread": false,
      "description": "topmost value"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "set",
    "name": "vars",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#vars",
    "access": "public",
    "description": "replace the current value",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "new value"
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#constructor",
    "access": "public",
    "description": "options default to {@link Corrode.defaults}, also accepts options\nfor {@link Transform#constructor}.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "CorrodeBase#LITTLE_ENDIAN",
        "defaultRaw": "CorrodeBase#LITTLE_ENDIAN",
        "name": "options.endianness",
        "description": "endianness, when none is explicitly given by the job"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "Symbol(loop-variable)",
        "defaultRaw": "Symbol(loop-variable)",
        "name": "options.loopIdentifier",
        "description": "identifier of the temporary variable used internally for loops"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'utf8'",
        "defaultRaw": "'utf8'",
        "name": "options.encoding",
        "description": "default encoding, when none is explicitly given by the job"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.finishJobsOnEOF",
        "description": "whether to finish all remaining jobs on stream-end or leave the corrode-instance in an unfinished state with possibly many unresolved functions and unpredictable state (see tests)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.anonymousLoopDiscardDeep",
        "description": "when anonymous loop-jobs get discarded, the original state which gets restored is either a shallow copy or a deep copy of the original object (see tests)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.strictObjectMode",
        "description": "whether to prevent none-object values from being pushed onto {@link CorrodeBase#vars} (catches mistakes)"
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "options",
    "memberof": "src/base.js~CorrodeBase",
    "static": false,
    "longname": "src/base.js~CorrodeBase#options",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_transform",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#_transform",
    "access": "private",
    "description": "add a new chunk to the internal buffer and process remaining jobs\nthis TransformStream won't call the push-method as it is not able\nto guarantee correct ouptut while still reading data. this depends not on\ncorrode, but on the way you use it.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@implements",
        "tagValue": "{Transform#_transform}"
      }
    ],
    "params": [
      {
        "name": "chunk",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#_flush",
    "access": "private",
    "description": "finish remaining jobs if finishJobsOnEOF is enabled",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@implements",
        "tagValue": "{Transform#_flush}"
      }
    ],
    "params": [
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "jobLoop",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#jobLoop",
    "access": "public",
    "description": "internal function to process the array of jobs still remaing.\nthis function is synchronous. this is due to the fact of keeping things\nmore simple. if you intend to use this library expecting taps and loops\nto work async you're invited to create an issue to inform me of the\nneed for this kind of behaviour. Until then corrode should satisfy most use cases.\n\nif you desperately need async behaviour when parsing data, i'd recommend\ndoing that after corrode has finished parsing the buffer, separately.",
    "lineNumber": 233,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "assertion-errors, runtime-errors"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "finishRemainingJobs",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#finishRemainingJobs",
    "access": "public",
    "description": "re-starts the jobLoop with the job-list cleaned from any read jobs\n{@link CorrodeBase#removeReadJobs}\n{@link CorrodeBase#isUnwinding}",
    "lineNumber": 387,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "removeReadJobs",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#removeReadJobs",
    "access": "public",
    "description": "purges all jobs from the job-queue, which need to read from the stream",
    "lineNumber": 402,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_moveOffset",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#_moveOffset",
    "access": "private",
    "description": "utility method to move both {@link CorrodeBase#chunkOffset} and\n{@link CorrodeBase#streamOffset} by a given amount of bytes",
    "lineNumber": 416,
    "params": [
      {
        "name": "by",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "queueJobs",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#queueJobs",
    "access": "public",
    "description": "remove all jobs from {@link CorrodeBase#jobs} with the ability to re-add them back later.",
    "examples": [
      "  + [\n  |   { type: 'push', name: 'struct', fn },\n  |   { type: 'uint8', name: 'var' ' }\n  | ]\n  |\n  | jobLoop - iteration\n  |\n  | var unqueueJobs = queJobs();\n  |\n  | []\n  |\n  | fn();\n  |\n  | [\n  |   { type: 'uint8', name: 'strvar' }\n  | ]\n  |\n  | unqueueJobs();\n  |\n  | [\n  |   { type: 'uint8', name: 'strvar' },\n  |   { type: 'uint8', name: 'var'   }\n  v ]"
    ],
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} function to append all queued jobs back onto the jobs-array (borrowed from redux)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "function to append all queued jobs back onto the jobs-array (borrowed from redux)"
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "_pushJob",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#_pushJob",
    "access": "private",
    "description": "utility method to push a new job onto the job-array",
    "lineNumber": 469,
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    },
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "endianness",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "tap",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#tap",
    "access": "public",
    "description": "push a tap-job onto the job-array\na tap-job is a special kind of job allowing the developer to peek into\nthe current variables and creating more complex structures and behaviour\nbased on available information.",
    "lineNumber": 489,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "name of the new variable-layer. if none is provided, the current layer will be used"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: *)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "called when this job is reached"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "array of possible arguments being passed to the callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "loop",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#loop",
    "access": "public",
    "description": "push a loop-job onto the job-array\na loop-job is a special kind of job allowing the developer to create loops\nin the current job-array. this allows for iteration, seeking and more\ncomplex behaviours",
    "lineNumber": 516,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "name of the new variable-layer. if none is provided, the current layer will be used"
      },
      {
        "nullable": null,
        "types": [
          "function(end: function, discard: function, i: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "called until `end()` is called.\n       `end(true)` can be used to end and discard the current loop.\n       `discard()` can be used to reset the current layer ({@link CorrodeBase#options.anonymousLoopDiscardDeep}).\n       `i` is the current iteration count"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "skip",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#skip",
    "access": "public",
    "description": "push a skip-job onto the job-array\nskip-jobs allow the developer to skip a given number of bytes.\nIf the amount of bytes exceeds the current available byte-count in the\ninternal buffer {@link CorrodeBase#streamBuffer} the job will wait for enough\ndata. If this data won't come the job gets aborted and corrode ends.\nIf you want to skip a negative amount of bytes you have to disable auto-flushing.\nthis can be done by setting {@link CorrodeBase#isSeeking} to `true`.",
    "lineNumber": 554,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "how many bytes to skip. Given a string, corrode will try to find a variable with the given string in the current layer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "pop",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#pop",
    "access": "public",
    "description": "push a pop-job onto the job-array\nthe pop-job pops a layer from {@link CorrodeBase#varStack}.\nthis most probably doesn't have to get called manually, as\n{@link CorrodeBase#tap} and {@link CorrodeBase#loop} will do this automatically",
    "lineNumber": 568,
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "push",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#push",
    "access": "public",
    "description": "push a push-job onto the job-array\nthe push-job pushes a new layer onto {@link CorrodeBase#varStack}.\nthis most probably doesn't have to get called manually, as\n{@link CorrodeBase#tap} and {@link CorrodeBase#loop} will do this automatically",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the new layer"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "value",
        "description": "value of the new layer (default is from {@link VariableStack})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "buffer",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#buffer",
    "access": "public",
    "description": "pushes a buffer-job onto the job-array\nthe buffer-job will read a buffer with the given length starting at the\ncurrent offset {@link CorrodeBase#bufferOffset}.\nThe returned Buffer will be a slice (not a copy) of the underlying {@link CorrodeBase#streamBuffer}",
    "lineNumber": 600,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the buffer-variable"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "length of the buffer in bytes. Given a string, corrode will try to find a variable with the given string in the current layer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "string",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#string",
    "access": "public",
    "description": "pushes a string-job onto the job-array\nthe string-job will read a string with the given length starting at the\ncurrent offset {@link CorrodeBase#bufferOffset}",
    "lineNumber": 618,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the string-variable"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "length of the string in bytes (_not characters_). Given a string, corrode will try to find a variable with the given string in the current layer"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "CorrodeBase#options.encoding",
        "defaultRaw": "CorrodeBase#options.encoding",
        "name": "encoding",
        "description": "encoding encoding used to decode the string, defaults to 'utf8'.\n                available encodings can be found here https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "int8",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int8",
    "access": "public",
    "description": "push a int8 (signed) job onto the job-array",
    "lineNumber": 632,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "int8le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int8le",
    "access": "public",
    "description": "push a int8 (signed) job onto the job-array",
    "lineNumber": 640,
    "deprecated": "int8 needs no endianness, use int8() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "int8be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int8be",
    "access": "public",
    "description": "push a int8 (signed) job onto the job-array",
    "lineNumber": 648,
    "deprecated": "int8 needs no endianness, use int8() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "uint8",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint8",
    "access": "public",
    "description": "push a uint8 (unsigned) job onto the job-array",
    "lineNumber": 655,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "uint8le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint8le",
    "access": "public",
    "description": "push a uint8 (unsigned) job onto the job-array",
    "lineNumber": 663,
    "deprecated": "uint8 needs no endianness, use uint8() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "uint8be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint8be",
    "access": "public",
    "description": "push a uint8 (unsigned) job onto the job-array",
    "lineNumber": 671,
    "deprecated": "uint8 needs no endianness, use uint8() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "int16",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int16",
    "access": "public",
    "description": "push a int16 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 679,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "int16le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int16le",
    "access": "public",
    "description": "push a int16 (signed) job with little endianness onto the job-array",
    "lineNumber": 686,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "int16be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int16be",
    "access": "public",
    "description": "push a int16 (signed) job with big endianness onto the job-array",
    "lineNumber": 693,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "uint16",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint16",
    "access": "public",
    "description": "push a uint16 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 700,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "uint16le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint16le",
    "access": "public",
    "description": "push a uint16 (unsigned) job with little endianness onto the job-array",
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "uint16be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint16be",
    "access": "public",
    "description": "push a uint16 (unsigned) job with big endianness onto the job-array",
    "lineNumber": 714,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "int32",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int32",
    "access": "public",
    "description": "push a int32 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 722,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "int32le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int32le",
    "access": "public",
    "description": "push a int32 (signed) job with little endianness onto the job-array",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "int32be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int32be",
    "access": "public",
    "description": "push a int32 (signed) job with big endianness onto the job-array",
    "lineNumber": 736,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "uint32",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint32",
    "access": "public",
    "description": "push a uint32 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 743,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "uint32le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint32le",
    "access": "public",
    "description": "push a uint32 (unsigned) job with little endianness onto the job-array",
    "lineNumber": 750,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "uint32be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint32be",
    "access": "public",
    "description": "push a uint32 (unsigned) job with big endianness onto the job-array",
    "lineNumber": 757,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "int64",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int64",
    "access": "public",
    "description": "push a int64 (signed) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 767,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "int64le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int64le",
    "access": "public",
    "description": "push a int64 (signed) job with little endianness onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 776,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "int64be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#int64be",
    "access": "public",
    "description": "push a int64 (signed) job with big endianness onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "uint64",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint64",
    "access": "public",
    "description": "push a uint64 (unsigned) job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 794,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "uint64le",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint64le",
    "access": "public",
    "description": "push a uint64 (unsigned) job with little endianness onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 803,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "uint64be",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#uint64be",
    "access": "public",
    "description": "push a uint64 (unsigned) job with big endianness onto the job-array\nnote that in64 may be unprecise, due to number-values being double in js",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "float",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#float",
    "access": "public",
    "description": "push a float job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 820,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "floatle",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#floatle",
    "access": "public",
    "description": "push a float job with little endianness onto the job-array",
    "lineNumber": 827,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "floatbe",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#floatbe",
    "access": "public",
    "description": "push a float job with big endianness onto the job-array",
    "lineNumber": 834,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "double",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#double",
    "access": "public",
    "description": "push a double job with default endianness ({@link CorrodeBase#options.endianness}) onto the job-array",
    "lineNumber": 842,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "doublele",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#doublele",
    "access": "public",
    "description": "push a double job with little endianness onto the job-array",
    "lineNumber": 849,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "doublebe",
    "memberof": "src/base.js~CorrodeBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~CorrodeBase#doublebe",
    "access": "public",
    "description": "push a double job with big endianness onto the job-array",
    "lineNumber": 856,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the variable to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrodeBase"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/index.js",
    "content": "import CorrodeBase from './base';\nimport * as utils from './utils';\nimport { isPlainObject } from 'lodash';\n\nimport * as MAPPERS from './map';\nimport * as ASSERTIONS from './assert';\n\nimport { inspect } from 'util';\n\n/**\n * Corrode\n * A batteries-included library for reading your binary data.\n * It helps you converting that blob-mess into readable data.\n *\n * It inherits from {@link CorrodeBase} to make the abstraction between these\n * two components more obvious. CorrodeBase does all the dirty low-level work\n * reading bytes, managing jobs, etc. This class however doesn't manipulate\n * the {@link CorrodeBase#jobs}-array or messes in other ways with the {@link CorrodeBase#jobLoop}.\n *\n * This class builds on loop and tap to provide more complex functionality.\n */\nexport default class Corrode extends CorrodeBase {\n\n    /**\n     * object holding all the user-defined extensions.\n     * these will get bound to the corrode-instance on calling the constructor\n     * @type {Object<Function>}\n     */\n    static EXTENSIONS = {};\n\n    /**\n     * mappers-object\n     * @type {Object<Function>}\n     */\n    static MAPPERS = MAPPERS;\n\n    /**\n     * assertions-object\n     * @type {Object<Function>}\n     */\n    static ASSERTIONS = ASSERTIONS;\n\n    /**\n     * initializes mappers, assertions and extensions\n     * @param {object} options {@link CorrodeBase#constructor}\n     */\n    constructor(options){\n        super(...arguments);\n\n        // bind ext, map & assert onto this instance\n        /** @type {Object<bound Function>} ext {@link Corrode.EXTENSIONS} bound to this instance */\n        this.ext = utils.bindObject(Corrode.EXTENSIONS, this);\n        /** @type {Object<bound Function>} map {@link Corrode.MAPPERS} bound to this instance */\n        this.map = utils.tapBindObject(Corrode.MAPPERS, this);\n        /** @type {Object<bound Function>} assert {@link Corrode.ASSERTIONS} bound to this instance */\n        this.assert = utils.tapBindObject(Corrode.ASSERTIONS, this);\n    }\n\n    /**\n     * pushes a repeat-job onto the job-array\n     * a repeat-job repeats itself a given number of times and then ends.\n     * it's also possible to end the job prematurely or discard it.\n     * This is nothing else than a proxy to {@link CorrodeBase#loop}\n     * @param {string} [name] name of the new variable-layer. if none is provided, the current layer will be used\n     * @param {number} length iteration-count as number or as string referencing a variable from {@link CorrodeBase#vars}\n     * @param {function(end: function, discard: function, i: number)} fn called until `end()` is called.\n     *        `end(true)` can be used to end and discard the current loop.\n     *        `discard()` can be used to reset the current layer ({@link CorrodeBase#options.anonymousLoopDiscardDeep}).\n     *        `i` is the current iteration count\n     * @return {Corrode} this\n     */\n    repeat(name, length, fn){\n        if(typeof name === 'number' || typeof length === 'function'){\n            fn = length;\n            length = name;\n            name = undefined;\n        }\n\n        return this.tap(function(){\n            if(typeof length === 'string'){\n                length = this.vars[length];\n            }\n\n            if(length === 0){\n                if(name){\n                    this.vars[name] = [];\n                }\n                return this;\n            }\n\n            const loopGuard = function(end, discard, i){\n                fn.call(this, end, discard, i);\n\n                if(i >= length - 1){\n                    end();\n                }\n            };\n\n            if(!name){\n                return this.loop(loopGuard);\n            }\n\n            return this.loop(name, loopGuard);\n        });\n    }\n\n    /**\n     * pushes a terminatedBuffer-job onto the job-array\n     * The returned Buffer will be a slice (not a copy) of the underlying {@link CorrodeBase#streamBuffer}\n     * internally this method uses the isSeeking-property to prevent flushing of the\n     * underlying buffer.\n     * @param {string} name name of the buffer-variable\n     * @param {number} [terminator=0] uint8-value indicating the end of the buffer\n     * @param {boolean} [discardTerminator=true] whether or not to include the terminator in the resulting buffer\n     * @return {Corrode} this\n     */\n    terminatedBuffer(name, terminator = 0, discardTerminator = true){\n        let bufferLength = null;\n        const loopVar = Symbol.for('terminatedBufferTmp');\n\n        return this\n            .tap(function(){\n                terminator = typeof terminator === 'string' ? this.vars[terminator] : terminator;\n                /** @type {boolean} isSeeking {@link CorrodeBase#isSeeking} */\n                this.isSeeking = true;\n            })\n            .loop(function(end, discard, i){\n                this\n                    .uint8(loopVar)\n                    .tap(function(){\n                        if(this.vars[loopVar] === terminator){\n                            bufferLength = i + 1;\n                            end();\n                        }\n                    });\n            })\n            .tap(function(){\n                delete this.vars[loopVar];\n                this.vars[name] = this.streamBuffer.slice(this.chunkOffset - bufferLength, this.chunkOffset + (discardTerminator ? -1 : 0));\n                this.isSeeking = false;\n            });\n    }\n\n    /**\n     * pushes a terminatedString-job onto the job-array\n     * Returns a string ranging from the current offset until the given terminator is found\n     * @param {string} name name of the string-variable\n     * @param {number} [terminator=0] uint8-value indicating the end of the buffer\n     * @param {boolean} [discardTerminator=true] whether or not to include the terminator in the resulting buffer\n     * @param {string} [encoding=CorrodeBase#options.encoding] encoding encoding used to decode the string, defaults to 'utf8'.\n     *                 available encodings can be found here https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n     * @return {Corrode} this\n     */\n    terminatedString(name, terminator = 0, discardTerminator = true, encoding = this.options.encoding){\n        return this\n            .terminatedBuffer(name, terminator, discardTerminator)\n            .tap(function(){\n                if(!this.vars[name] || this.vars[name].length === 0){\n                    // in case nothing is found, return an empty string\n                    this.vars[name] = '';\n                } else {\n                    this.vars[name] = this.vars[name].toString(encoding);\n                }\n            });\n    }\n\n    /**\n     * pushes a pointer-job onto the job-array\n     * returns an item of an accessable type (object property, array element)\n     * being given an accessable type. the offset used to access the accessable type\n     * is determined by reading a value of the given type\n     * @param {string} name name of the item-variable\n     * @param {Object|Array} obj accessable type variable\n     * @param {string} type name of the type which should be used to read the index (int8, uint32, etc)\n     * @return {Corrode} this\n     */\n    pointer(name, obj, type = 'int64'){\n        return this\n            .tap(function(){\n                if(typeof obj === 'string'){\n                    obj = this.vars[obj];\n                }\n\n                this\n                    [type](name)\n                    .map.abs(name)\n                    .map.get(name, obj);\n            });\n    }\n\n    /**\n     * sets {@link CorrodeBase#streamOffset} to a given absolute position\n     * like skip, but absolute\n     * If you want to set the offset to something lower than the current offset, you should\n     * enable {@link CorrodeBase#isSeeking} asap, as otherwise there's no guarantee that the buffer is still available\n     * or already flushed.\n     * @param {number|string} offset as number or as string referencing a variable from {@link CorrodeBase#vars}\n     * @return {Corrode} this\n     */\n    position(offset){\n        return this\n            .tap(function(){\n                if(typeof offset === 'string'){\n                    this.assert.exists(offset);\n                    offset = this.vars[offset];\n                }\n\n                this.skip(offset - this.streamOffset);\n            });\n    }\n\n    /**\n     * helper utility logging the current vars\n     * @return {Corrode} this\n     */\n    debug(){\n        return this.tap(function(){\n            console.log(inspect(this.vars, {\n                showHidden: false,\n                depth: null\n            }));\n        });\n    }\n\n    /**\n     * helper utility, parsing a given buffer async\n     * @param {Buffer} buffer data\n     * @param {function(error: *, data: object)} done callback\n     * @return {Corrode} this\n     */\n    fromBuffer(buffer, done){\n        this.end(buffer);\n        this.on('finish', () => done(this.vars));\n        return this;\n    }\n\n    /**\n     * adds an extension to corrode.\n     * extensions are user-defined functions allowing you to better abstract upon corrode\n     * an extension can accept parameters and receives the current available variables.\n     * it can either directly return values or read them from the buffer with corrode's functions.\n     * @param {string} name of the extension\n     * @param {function(...args: *)} fn function receiving arguments given when calling the extension\n     * @example <caption>Extension reading values</caption>\n     * Corrode.addExtension('foo', function(arg1){ this.uint8(arg1); });\n     * (new Corrode()).ext.foo('foo_value', 'arg1');\n     * @example <caption>Extension returning values</caption>\n     * Corrode.addExtension('bar', function(arg1){ return this.vars[arg1] * this.vars[arg1] });\n     * (new Corrode()).ext.bar('bar_value', 'arg1')\n     */\n    static addExtension(name, fn){\n        Corrode.EXTENSIONS[name] = function(name = 'values', ...args){\n            return this.tap(name, function(){\n                const value = fn.apply(this, args);\n\n                if(typeof value !== 'undefined'){\n                    if(this.options.strictObjectMode && this.jobs.length > 0 && value !== this && !isPlainObject(value)){\n                        throw new TypeError(`Can't mix immediate returns with later reads on a non-object value (${JSON.stringify(value)}) in strictObjectMode`);\n                    }\n                    /** @type {Object} vars {@link CorrodeBase#vars} */\n                    this.vars = value;\n                }\n            });\n        };\n\n        Corrode.EXTENSIONS[name].orgFn = fn;\n    }\n}\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "Corrode",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Corrode",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/index.js",
    "importStyle": "Corrode",
    "description": "Corrode\nA batteries-included library for reading your binary data.\nIt helps you converting that blob-mess into readable data.\n\nIt inherits from {@link CorrodeBase} to make the abstraction between these\ntwo components more obvious. CorrodeBase does all the dirty low-level work\nreading bytes, managing jobs, etc. This class however doesn't manipulate\nthe {@link CorrodeBase#jobs}-array or messes in other ways with the {@link CorrodeBase#jobLoop}.\n\nThis class builds on loop and tap to provide more complex functionality.",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "src/base.js~CorrodeBase"
    ]
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "EXTENSIONS",
    "memberof": "src/index.js~Corrode",
    "static": true,
    "longname": "src/index.js~Corrode.EXTENSIONS",
    "access": "public",
    "description": "object holding all the user-defined extensions.\nthese will get bound to the corrode-instance on calling the constructor",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object<Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "MAPPERS",
    "memberof": "src/index.js~Corrode",
    "static": true,
    "longname": "src/index.js~Corrode.MAPPERS",
    "access": "public",
    "description": "mappers-object",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Object<Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "ASSERTIONS",
    "memberof": "src/index.js~Corrode",
    "static": true,
    "longname": "src/index.js~Corrode.ASSERTIONS",
    "access": "public",
    "description": "assertions-object",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object<Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#constructor",
    "access": "public",
    "description": "initializes mappers, assertions and extensions",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{@link CorrodeBase#constructor}"
      }
    ]
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "ext",
    "memberof": "src/index.js~Corrode",
    "static": false,
    "longname": "src/index.js~Corrode#ext",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Object<bound Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "map",
    "memberof": "src/index.js~Corrode",
    "static": false,
    "longname": "src/index.js~Corrode#map",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object<bound Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "assert",
    "memberof": "src/index.js~Corrode",
    "static": false,
    "longname": "src/index.js~Corrode#assert",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Object<bound Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#repeat",
    "access": "public",
    "description": "pushes a repeat-job onto the job-array\na repeat-job repeats itself a given number of times and then ends.\nit's also possible to end the job prematurely or discard it.\nThis is nothing else than a proxy to {@link CorrodeBase#loop}",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "name of the new variable-layer. if none is provided, the current layer will be used"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "iteration-count as number or as string referencing a variable from {@link CorrodeBase#vars}"
      },
      {
        "nullable": null,
        "types": [
          "function(end: function, discard: function, i: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "called until `end()` is called.\n       `end(true)` can be used to end and discard the current loop.\n       `discard()` can be used to reset the current layer ({@link CorrodeBase#options.anonymousLoopDiscardDeep}).\n       `i` is the current iteration count"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "terminatedBuffer",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#terminatedBuffer",
    "access": "public",
    "description": "pushes a terminatedBuffer-job onto the job-array\nThe returned Buffer will be a slice (not a copy) of the underlying {@link CorrodeBase#streamBuffer}\ninternally this method uses the isSeeking-property to prevent flushing of the\nunderlying buffer.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the buffer-variable"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "terminator",
        "description": "uint8-value indicating the end of the buffer"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "discardTerminator",
        "description": "whether or not to include the terminator in the resulting buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "isSeeking",
    "memberof": "src/index.js~Corrode",
    "static": false,
    "longname": "src/index.js~Corrode#isSeeking",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "terminatedString",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#terminatedString",
    "access": "public",
    "description": "pushes a terminatedString-job onto the job-array\nReturns a string ranging from the current offset until the given terminator is found",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the string-variable"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "terminator",
        "description": "uint8-value indicating the end of the buffer"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "discardTerminator",
        "description": "whether or not to include the terminator in the resulting buffer"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "CorrodeBase#options.encoding",
        "defaultRaw": "CorrodeBase#options.encoding",
        "name": "encoding",
        "description": "encoding encoding used to decode the string, defaults to 'utf8'.\n                available encodings can be found here https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "pointer",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#pointer",
    "access": "public",
    "description": "pushes a pointer-job onto the job-array\nreturns an item of an accessable type (object property, array element)\nbeing given an accessable type. the offset used to access the accessable type\nis determined by reading a value of the given type",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the item-variable"
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "accessable type variable"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "name of the type which should be used to read the index (int8, uint32, etc)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "position",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#position",
    "access": "public",
    "description": "sets {@link CorrodeBase#streamOffset} to a given absolute position\nlike skip, but absolute\nIf you want to set the offset to something lower than the current offset, you should\nenable {@link CorrodeBase#isSeeking} asap, as otherwise there's no guarantee that the buffer is still available\nor already flushed.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "as number or as string referencing a variable from {@link CorrodeBase#vars}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "debug",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#debug",
    "access": "public",
    "description": "helper utility logging the current vars",
    "lineNumber": 216,
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Corrode#fromBuffer",
    "access": "public",
    "description": "helper utility, parsing a given buffer async",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "data"
      },
      {
        "nullable": null,
        "types": [
          "function(error: *, data: object)"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Corrode"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "addExtension",
    "memberof": "src/index.js~Corrode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~Corrode.addExtension",
    "access": "public",
    "description": "adds an extension to corrode.\nextensions are user-defined functions allowing you to better abstract upon corrode\nan extension can accept parameters and receives the current available variables.\nit can either directly return values or read them from the buffer with corrode's functions.",
    "examples": [
      "<caption>Extension reading values</caption>\nCorrode.addExtension('foo', function(arg1){ this.uint8(arg1); });\n(new Corrode()).ext.foo('foo_value', 'arg1');",
      "<caption>Extension returning values</caption>\nCorrode.addExtension('bar', function(arg1){ return this.vars[arg1] * this.vars[arg1] });\n(new Corrode()).ext.bar('bar_value', 'arg1')"
    ],
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "of the extension"
      },
      {
        "nullable": null,
        "types": [
          "function(...args: *)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function receiving arguments given when calling the extension"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "vars",
    "memberof": "src/index.js~Corrode",
    "static": true,
    "longname": "src/index.js~Corrode.vars",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/map/index.js",
    "content": "/**\n * These functions provide basic mapping-abilities for Corrode's VariableStack\n * {@link Corrode#vars}\n *\n * Imagine them like this:\n * ```\n * const parser = new Corrode();\n * parser.uint8('value').map.double('value');\n * ```\n *\n * Of course there's no real mapping-function which doubles a value.\n * But the concept is that they are functions receiving a value, processing it\n * and saving a new value in the {@link VariableStack} in place of the old one.\n *\n * The imaginary code above would yield `{ value: 4 }`, parsing a buffer like this `[2]`.\n *\n * There are two ways to create a mapper. Either by using the {bind} helper-function\n * which simply receives a value and returns one, or by defining the function yourself.\n *\n * The bind-utility only allows for simple functions with no additional parameters.\n * Our double-mapper would be a perfect example: `export const double = bind(val => val * 2)`.\n * These should be pure functions.\n *\n * The other way - defining your own mapper-function accepts deals with the {@link VariableStack}\n * at {@link Corrode#vars} by itself. This means: reads and writes from {@link Corrode#vars}. Because of that\n * they are inherently impure. A next step should be to move all mappers to pure functions.\n * (see Issue #28)\n *\n * Note that all mappers don't check for existance, validity or other assumptions.\n * You have to do that yourself with assertions.\n */\n\n/**\n * helper function to bind a mapper\n * mappers created with this utility accept two parameters:\n * name and src, with the src defaulting to name.\n * This way, we get a mapper which per-default takes the target as the source\n * but also accepts a different source.\n * @param {function(val: *)} fn map-function\n * @return {function}         function ready to use in tap\n */\nconst bind = function(fn){\n    return function(name, src = name){\n        this.vars[name] = fn(this.vars[src]);\n    };\n};\n\n/**\n * replace a variable in the stack by a mapped version of itself\n * @param {string}           name identifier of the variable to map\n * @param {function(val: *)} fn   map-function\n * @example\n * parser.uint8('value').map.callback('value', val => (val - 1) * 2)\n *\n * // [21] => { value: 10 }\n */\nexport function callback(name, fn){\n    this.vars[name] = fn(this.vars[name]);\n}\n\n/**\n * retrieve a value from an accessable type (like array[0] or object['foo'])\n * @param {string} name                    identifier of the variable to map\n * @param {array|object|string} accessable accessable variable\n * @param {string} [src=name]              identifier of the variable in {@link Corrode#vars} by which to access `accessable`\n * @example <caption>get from array</caption>\n * parser.uint8('accessor').map.get('accessor', ['A', 'B', 'C', 'D'])\n *\n * // [2] => { accessor: 'C' }\n *\n * @example <caption>get from object</caption>\n * parser.terminatedString('accessor').map.get('accessor', { foo: 'A', bar: 'B', qux: 'C' })\n *\n * // ['q', 'u', 'x', 0x00] => { accessor: 'C' }\n */\nexport function get(name, accessable, src = name){\n    this.vars[name] = accessable[this.vars[src]];\n}\n\n/**\n * retrieve a filtered array of objects from an array of objects, matching a specified attribute against a specified value\n * @param {string} name         identifier of the variable, to write to {@link Corrode#vars}\n * @param {Array<Object>} array array, containing the objects to filter\n * @param {string} attr         identifier of the attribute from an object of `array` to compare against\n * @param {string} [src=name]   {@link Corrode#vars}-identifier to read from\n * @throws {Error} when no object can be found\n * @example\n * parser.uint8('matchAgainst').map.findAll('matchAgainst', [\n *   { children: 1, name: 'foo' },\n *   { children: 2, name: 'bar' },\n *   { children: 2, name: 'qux' }\n * ], 'children')\n *\n * // [2] => { matchAgainst: [\n * //   { children: 2, name: 'bar' },\n * //   { children: 2, name: 'qux' }\n * // ]}\n *\n * // [1] => { matchAgainst: [\n * //   { children: 1, name: 'foo' }\n * // ]}\n */\nexport function findAll(name, array, attr, src = name){\n    const filtered = array.filter(item => item[attr] === this.vars[src]);\n    if(filtered.length === 0){\n        throw new Error(`cannot find object in array with ${attr} === ${src}(${this.vars[src]})`);\n    }\n    this.vars[name] = filtered;\n}\n\n/**\n * retrieve the first object from an array of objects, matching a specified attribute against a specified value\n * like {@link findAll}, but returning only the first element\n * @param {string} name         identifier of the variable, to write to {@link Corrode#vars}\n * @param {Array<Object>} array array, containing the objects to filter\n * @param {string} attr         identifier of the attribute from an object of `array` to compare against\n * @param {string} [src=name]   {@link Corrode#vars}-identifier to read from\n * @throws {Error} when no object can be found\n * @example\n * parser.uint8('matchAgainst').map.find('matchAgainst', [\n *   { id: 1, name: 'foo' },\n *   { id: 7, name: 'bar' },\n *   { id: 4, name: 'qux' }\n * ], 'id')\n *\n * // [4] => { matchAgainst: { id: 4, name: 'qux' } }\n *\n * // [2] => Error cannot find object!\n */\nexport function find(name, array, attr, src = name){\n    findAll.call(this, name, array, attr, src);\n    this.vars[name] = this.vars[name][0];\n}\n\n/**\n * replace {@link Corrode#vars} completely with a value from {@link Corrode#vars}\n * especially useful when pushing a variable further up in the stack\n *\n * @example <caption>push loop-variables up</caption>\n * parser.loop('array', function(){\n *     this\n *         .uint8('value')\n *         .map.double()\n *         .map.push('value');\n * });\n *\n * // [1, 2, 3, 4] => { array: [2, 4, 6, 8] }\n *\n * @example <caption>push values in an extension</caption>\n * Corrode.addExtension('doStuff', function(){\n *     this\n *         .uint32('address')\n *         .tap(function(){\n *             this.vars.address = `0x${this.vars.address.toString(16)}`;\n *         })\n *         .map.push('address');\n * });\n *\n * parser.ext.doStuff('hexAddress');\n *\n * // [245] => { hexAddress: '0xf5' }\n *\n * @param {string} [name='values'] identifier of the variable being used as replacement\n */\nexport function push(name = 'values'){\n    this.vars = this.vars[name];\n}\n\n/**\n * map a value by checking whether it has some bits set\n * @param {string} name    identifier of the variable, to write to {@link Corrode#vars}\n * @param  {Object|number} maskObject Object or number by which to check the bits of the variable to map\n * @example <caption>map via number</caption>\n * parser.uint8('bits').map.bitmask('bits', 0x80)\n *\n * // [0b10111110] => { bits: true }\n *\n * @example <caption>map via object</caption>\n * parser.uint8('bits').map.bitmask('bits', {\n *   isCompressed: 0x80,\n *   isReadOnly: 0x40\n * })\n *\n * // [0b10111110] => { bits: { isCompressed: true, isReadOnly: false } }\n */\nexport function bitmask(name, maskObject){\n    const bits = this.vars[name];\n\n    // shortcut for single values\n    if(typeof maskObject === 'number'){\n        return this.vars[name] = (bits & maskObject) === maskObject;\n    }\n\n    const values = {};\n    Object.keys(maskObject).forEach(maskName => {\n        const mask = maskObject[maskName];\n        values[maskName] = (bits & mask) === mask;\n    });\n    this.vars[name] = values;\n}\n\n/**\n * retrieve absolute value of a number\n * {@link Math.abs}\n * @type {function}\n * @example\n * this.int8('value').map.abs('value')\n *\n * // [-14] => { value: 14 }\n */\nexport const abs = bind(Math.abs);\n\n/**\n * retrieve inverted number\n * @type {function}\n * @example\n * this.uint8('value').map.abs('value')\n *\n * // [27] => { value: -27 }\n */\nexport const invert = bind(val => val * -1);\n\n/**\n * retrieve trimmed string\n * @type {function}\n * @example\n * this.terminatedString('value').map.trim('value')\n *\n * // [' ', '\\t', 'f', 'o', 'b', 'r', '\\n'] => { value: 'fobr' }\n */\nexport const trim = bind(str => str.trim());\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/map/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "bind",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~bind",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/map/index.js",
    "importStyle": null,
    "description": "helper function to bind a mapper\nmappers created with this utility accept two parameters:\nname and src, with the src defaulting to name.\nThis way, we get a mapper which per-default takes the target as the source\nbut also accepts a different source.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(val: *)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "map-function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "function ready to use in tap"
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "callback",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~callback",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{callback}",
    "description": "replace a variable in the stack by a mapped version of itself",
    "examples": [
      "parser.uint8('value').map.callback('value', val => (val - 1) * 2)\n\n// [21] => { value: 10 }"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier of the variable to map"
      },
      {
        "nullable": null,
        "types": [
          "function(val: *)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "map-function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "get",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~get",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{get}",
    "description": "retrieve a value from an accessable type (like array[0] or object['foo'])",
    "examples": [
      "<caption>get from array</caption>\nparser.uint8('accessor').map.get('accessor', ['A', 'B', 'C', 'D'])\n\n// [2] => { accessor: 'C' }",
      "<caption>get from object</caption>\nparser.terminatedString('accessor').map.get('accessor', { foo: 'A', bar: 'B', qux: 'C' })\n\n// ['q', 'u', 'x', 0x00] => { accessor: 'C' }"
    ],
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier of the variable to map"
      },
      {
        "nullable": null,
        "types": [
          "array",
          "object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accessable",
        "description": "accessable variable"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "src",
        "description": "identifier of the variable in {@link Corrode#vars} by which to access `accessable`"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "findAll",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~findAll",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{findAll}",
    "description": "retrieve a filtered array of objects from an array of objects, matching a specified attribute against a specified value",
    "examples": [
      "parser.uint8('matchAgainst').map.findAll('matchAgainst', [\n  { children: 1, name: 'foo' },\n  { children: 2, name: 'bar' },\n  { children: 2, name: 'qux' }\n], 'children')\n\n// [2] => { matchAgainst: [\n//   { children: 2, name: 'bar' },\n//   { children: 2, name: 'qux' }\n// ]}\n\n// [1] => { matchAgainst: [\n//   { children: 1, name: 'foo' }\n// ]}"
    ],
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier of the variable, to write to {@link Corrode#vars}"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array, containing the objects to filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": "identifier of the attribute from an object of `array` to compare against"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "src",
        "description": "{@link Corrode#vars}-identifier to read from"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when no object can be found"
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "find",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~find",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{find}",
    "description": "retrieve the first object from an array of objects, matching a specified attribute against a specified value\nlike {@link findAll}, but returning only the first element",
    "examples": [
      "parser.uint8('matchAgainst').map.find('matchAgainst', [\n  { id: 1, name: 'foo' },\n  { id: 7, name: 'bar' },\n  { id: 4, name: 'qux' }\n], 'id')\n\n// [4] => { matchAgainst: { id: 4, name: 'qux' } }\n\n// [2] => Error cannot find object!"
    ],
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier of the variable, to write to {@link Corrode#vars}"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array, containing the objects to filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": "identifier of the attribute from an object of `array` to compare against"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "src",
        "description": "{@link Corrode#vars}-identifier to read from"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when no object can be found"
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "push",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~push",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{push}",
    "description": "replace {@link Corrode#vars} completely with a value from {@link Corrode#vars}\nespecially useful when pushing a variable further up in the stack",
    "examples": [
      "<caption>push loop-variables up</caption>\nparser.loop('array', function(){\n    this\n        .uint8('value')\n        .map.double()\n        .map.push('value');\n});\n\n// [1, 2, 3, 4] => { array: [2, 4, 6, 8] }",
      "<caption>push values in an extension</caption>\nCorrode.addExtension('doStuff', function(){\n    this\n        .uint32('address')\n        .tap(function(){\n            this.vars.address = `0x${this.vars.address.toString(16)}`;\n        })\n        .map.push('address');\n});\n\nparser.ext.doStuff('hexAddress');\n\n// [245] => { hexAddress: '0xf5' }"
    ],
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'values'",
        "defaultRaw": "'values'",
        "name": "name",
        "description": "identifier of the variable being used as replacement"
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "bitmask",
    "memberof": "src/map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/map/index.js~bitmask",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{bitmask}",
    "description": "map a value by checking whether it has some bits set",
    "examples": [
      "<caption>map via number</caption>\nparser.uint8('bits').map.bitmask('bits', 0x80)\n\n// [0b10111110] => { bits: true }",
      "<caption>map via object</caption>\nparser.uint8('bits').map.bitmask('bits', {\n  isCompressed: 0x80,\n  isReadOnly: 0x40\n})\n\n// [0b10111110] => { bits: { isCompressed: true, isReadOnly: false } }"
    ],
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier of the variable, to write to {@link Corrode#vars}"
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maskObject",
        "description": "Object or number by which to check the bits of the variable to map"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "abs",
    "memberof": "src/map/index.js",
    "static": true,
    "longname": "src/map/index.js~abs",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{abs}",
    "description": "retrieve absolute value of a number\n{@link Math.abs}",
    "examples": [
      "this.int8('value').map.abs('value')\n\n// [-14] => { value: 14 }"
    ],
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "invert",
    "memberof": "src/map/index.js",
    "static": true,
    "longname": "src/map/index.js~invert",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{invert}",
    "description": "retrieve inverted number",
    "examples": [
      "this.uint8('value').map.abs('value')\n\n// [27] => { value: -27 }"
    ],
    "lineNumber": 221,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "trim",
    "memberof": "src/map/index.js",
    "static": true,
    "longname": "src/map/index.js~trim",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/map/index.js",
    "importStyle": "{trim}",
    "description": "retrieve trimmed string",
    "examples": [
      "this.terminatedString('value').map.trim('value')\n\n// [' ', '\\t', 'f', 'o', 'b', 'r', '\\n'] => { value: 'fobr' }"
    ],
    "lineNumber": 231,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "import { mapValues } from 'lodash';\n\n/**\n * bind each function in an object with a tap to a given context\n * @param  {object} obj object with functions\n * @param  {object} ctx context\n * @return {object}     copy of object with each function wrapped in a tap\n */\nexport function tapBindObject(obj, ctx){\n    return mapValues(obj, fn => typeof fn === 'function' ? function(...args){\n        return ctx.tap(fn.bind(ctx, ...args));\n    } : fn);\n}\n\n/**\n * bind each function in an object to a given context\n * @param  {object} obj object with functions\n * @param  {object} ctx context\n * @return {object}     copy of object obj with each function bound to ctx\n */\nexport function bindObject(obj, ctx){\n    return mapValues(obj, fn => typeof fn === 'function' ? fn.bind(ctx) : fn);\n}\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "tapBindObject",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~tapBindObject",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/utils/index.js",
    "importStyle": "{tapBindObject}",
    "description": "bind each function in an object with a tap to a given context",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object with functions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "context"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "copy of object with each function wrapped in a tap"
    }
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "bindObject",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~bindObject",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/utils/index.js",
    "importStyle": "{bindObject}",
    "description": "bind each function in an object to a given context",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object with functions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "context"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "copy of object obj with each function bound to ctx"
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/variable-stack.js",
    "content": "class VariableStackLayer {\n    constructor(value = {}, isRoot = false, name = null){\n        this.value = value;\n        this.isRoot = isRoot;\n        this.name = name;\n    }\n\n    isRoot = false;\n    value = {};\n    name = null;\n}\n\n/**\n * The VariableStack is a special kind of stack.\n * It allows corrode to do black magic like loops in loops and other crazy stuff.\n *\n * To enable this we define a stack as an object, containing other objects.\n * Seen this way it looks more like a TreeStructure which layers you can\n * push and pop as you like.\n *\n * The VariableStack starts as an \"empty\" object.\n * \"empty\" meaning, that each layer is an object consisting of two/three values:\n * * `isRoot` telling the user whether this layer is the uppermost one.\n * * `value` holding the value for this layer.\n * * `[name]` name of this layer (root-layer won't have one)\n *\n * Pushing a new layer means adding a new object to the `value`-object of\n * the current layer and setting the current layer to our newly created one.\n *\n * Actually, the object getting added to the `value`-object is not just any object.\n * It itself is an object like `{ isRoot: false, value: {} }`.\n *\n * The root-layer (layer-object where `isRoot === true`) is the lowest layer.\n * The current layer is the topmost one.\n *\n * @example\n *  +--------------------------+                +-----------------+\n *  | VariableStack#value:     |                |                 | current layer\n *  | {                        |                | {}              |\n *  |   value_1: { foo: 'bar' }|                |                 | isRoot: false\n *  | }                        |                +-----------------+\n *  +------------+-------------+                |                 |\n *               |                              | {               |\n *               +                              |   foo: 'bar',   | VariableStack\n *         .push('value_1')                     |   value_2: {}   | #peek(1)\n *               +                +---------->  | }               |\n *               |                              |                 | isRoot: false\n *               v                +---------->  +-----------------+\n *   +-----------+----------+                   |                 |\n *   |#value: { foo: 'bar' }|                   | {               |\n *   +-----------+----------+                   |   value_1: {    | VariableStack\n *               |                              |     foo: 'bar', | #peek(2)\n *               +                              |     value_2: {} |\n *       .push('value_2')                       |   }             | isRoot: true\n *               +                              | }               |\n *               |                              |                 |\n *               v                              +-----------------+\n *          +----+-----+\n *          |#value: {}|\n *          +----------+\n *\n*/\nexport default class VariableStack {\n    constructor(){\n        this.top = this.stack[0];\n    }\n\n    /**\n     * internal storage for the stack\n     * @access public\n     * @type {Array<Object>}\n     */\n    stack = [new VariableStackLayer({}, true)];\n\n    /**\n     * retrieve the top-layer\n     * @return {Object} the current layer\n     */\n    top = null;\n\n    /**\n     * retrieve the value of the top.layer\n     * @return {Object|*} the current value\n     */\n    get value(){\n        return this.top.value;\n    }\n\n    /**\n     * set the current value\n     * this also updates the value in the parent-layer\n     * @param {Object|*} val the new value\n     */\n    set value(val){\n        if(!this.top.isRoot){\n            this.peek()[this.top.name] = val;\n        }\n        this.top.value = val;\n    }\n\n    /**\n     * get a layer below the current one\n     * @param {number} layerCount how many layers deeper relative from the current\n     * @return {Object} layer-object\n     */\n    peekLayer(layerCount = 1){\n        if(layerCount > this.stack.length - 1){\n            throw new ReferenceError(`can't retrieve layer ${layerCount}, stack is ${this.stack.length - 1} layers`);\n        }\n        return this.stack[this.stack.length - 1 - layerCount];\n    }\n\n    /**\n     * get the value of a layer below the current one\n     * @param {number} layerCount how many layers deeper relative from the current\n     * @return {Object|*} value\n     */\n    peek(layerCount = 1){\n        return this.peekLayer(layerCount).value;\n    }\n\n    /**\n     * push a value onto the stack\n     *\n     * The value doesn't have to be a object, but only objects will properly support child-layers.\n     * When pushing the new layer the current one will receive a reference to the pushed\n     * object as a value at the given name.\n     *\n     * Note, that if you're pushing a non-object value this reference will not work,\n     * as only arrays & objects are passed by reference. Instead the value in the\n     * layer above will be updated, when the current layer's value will be set.\n     *\n     * If the value you want to push already exists at the current layer\n     * VariableStack ignores your value and just re-uses the old one, so no\n     * layer will be replaced.\n     *\n     * @example\n     * varStack.push('foo');\n     * varStack.value.bar = 'baz';\n     * // varStack.value => { bar: 'baz' }\n     * // varStack.peek() => { foo: { bar: 'baz' } }\n     *\n     * @param {string} name name of the new layer\n     * @param {Object|*} [value={}] value-object of the new layer\n     */\n    push(name, value = {}){\n        if(typeof this.value[name] === 'undefined'){\n            // only push new value if there's no old one\n            this.value[name] = value;\n        } else {\n            // otherwise re-push the current one\n            value = this.value[name];\n        }\n\n        const index = this.stack.push(new VariableStackLayer(value, false, name));\n        this.top = this.stack[index - 1];\n    }\n\n    /**\n     * pop the current layer\n     * @throws {ReferenceError} thrown if the layer to be popped is the root-layer\n     */\n    pop(){\n        const popLayer = this.top;\n        if(popLayer.isRoot){\n            throw new ReferenceError('can\\'t pop root layer');\n        }\n\n        this.stack.pop();\n\n        this.top = this.stack[this.stack.length - 1];\n\n        // reassure that the value in the layer above is right\n        // (in case of non-object values)\n        this.value[popLayer.name] = popLayer.value;\n    }\n\n    /**\n     * pop all layers until the root-layer is reached\n     */\n    popAll(){\n        while(!this.top.isRoot){\n            this.pop();\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/src/variable-stack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "VariableStackLayer",
    "memberof": "src/variable-stack.js",
    "static": true,
    "longname": "src/variable-stack.js~VariableStackLayer",
    "access": "public",
    "export": false,
    "importPath": "corrode/src/variable-stack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/variable-stack.js~VariableStackLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStackLayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "value",
    "memberof": "src/variable-stack.js~VariableStackLayer",
    "static": false,
    "longname": "src/variable-stack.js~VariableStackLayer#value",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "isRoot",
    "memberof": "src/variable-stack.js~VariableStackLayer",
    "static": false,
    "longname": "src/variable-stack.js~VariableStackLayer#isRoot",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "name",
    "memberof": "src/variable-stack.js~VariableStackLayer",
    "static": false,
    "longname": "src/variable-stack.js~VariableStackLayer#name",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "VariableStack",
    "memberof": "src/variable-stack.js",
    "static": true,
    "longname": "src/variable-stack.js~VariableStack",
    "access": "public",
    "export": true,
    "importPath": "corrode/src/variable-stack.js",
    "importStyle": "VariableStack",
    "description": "The VariableStack is a special kind of stack.\nIt allows corrode to do black magic like loops in loops and other crazy stuff.\n\nTo enable this we define a stack as an object, containing other objects.\nSeen this way it looks more like a TreeStructure which layers you can\npush and pop as you like.\n\nThe VariableStack starts as an \"empty\" object.\n\"empty\" meaning, that each layer is an object consisting of two/three values:\n* `isRoot` telling the user whether this layer is the uppermost one.\n* `value` holding the value for this layer.\n* `[name]` name of this layer (root-layer won't have one)\n\nPushing a new layer means adding a new object to the `value`-object of\nthe current layer and setting the current layer to our newly created one.\n\nActually, the object getting added to the `value`-object is not just any object.\nIt itself is an object like `{ isRoot: false, value: {} }`.\n\nThe root-layer (layer-object where `isRoot === true`) is the lowest layer.\nThe current layer is the topmost one.",
    "examples": [
      " +--------------------------+                +-----------------+\n | VariableStack#value:     |                |                 | current layer\n | {                        |                | {}              |\n |   value_1: { foo: 'bar' }|                |                 | isRoot: false\n | }                        |                +-----------------+\n +------------+-------------+                |                 |\n              |                              | {               |\n              +                              |   foo: 'bar',   | VariableStack\n        .push('value_1')                     |   value_2: {}   | #peek(1)\n              +                +---------->  | }               |\n              |                              |                 | isRoot: false\n              v                +---------->  +-----------------+\n  +-----------+----------+                   |                 |\n  |#value: { foo: 'bar' }|                   | {               |\n  +-----------+----------+                   |   value_1: {    | VariableStack\n              |                              |     foo: 'bar', | #peek(2)\n              +                              |     value_2: {} |\n      .push('value_2')                       |   }             | isRoot: true\n              +                              | }               |\n              |                              |                 |\n              v                              +-----------------+\n         +----+-----+\n         |#value: {}|\n         +----------+"
    ],
    "lineNumber": 63,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "top",
    "memberof": "src/variable-stack.js~VariableStack",
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#top",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "stack",
    "memberof": "src/variable-stack.js~VariableStack",
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#stack",
    "access": "public",
    "description": "internal storage for the stack",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "get",
    "name": "value",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#value",
    "access": "public",
    "description": "retrieve the value of the top.layer",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "*"
      ],
      "spread": false,
      "description": "the current value"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "set",
    "name": "value",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#value",
    "access": "public",
    "description": "set the current value\nthis also updates the value in the parent-layer",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the new value"
      }
    ]
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "peekLayer",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#peekLayer",
    "access": "public",
    "description": "get a layer below the current one",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "layerCount",
        "description": "how many layers deeper relative from the current"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "layer-object"
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "peek",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#peek",
    "access": "public",
    "description": "get the value of a layer below the current one",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "layerCount",
        "description": "how many layers deeper relative from the current"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "*"
      ],
      "spread": false,
      "description": "value"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "push",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#push",
    "access": "public",
    "description": "push a value onto the stack\n\nThe value doesn't have to be a object, but only objects will properly support child-layers.\nWhen pushing the new layer the current one will receive a reference to the pushed\nobject as a value at the given name.\n\nNote, that if you're pushing a non-object value this reference will not work,\nas only arrays & objects are passed by reference. Instead the value in the\nlayer above will be updated, when the current layer's value will be set.\n\nIf the value you want to push already exists at the current layer\nVariableStack ignores your value and just re-uses the old one, so no\nlayer will be replaced.",
    "examples": [
      "varStack.push('foo');\nvarStack.value.bar = 'baz';\n// varStack.value => { bar: 'baz' }\n// varStack.peek() => { foo: { bar: 'baz' } }"
    ],
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the new layer"
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "value",
        "description": "value-object of the new layer"
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "pop",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#pop",
    "access": "public",
    "description": "pop the current layer",
    "lineNumber": 163,
    "throws": [
      {
        "types": [
          "ReferenceError"
        ],
        "description": "thrown if the layer to be popped is the root-layer"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "popAll",
    "memberof": "src/variable-stack.js~VariableStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/variable-stack.js~VariableStack#popAll",
    "access": "public",
    "description": "pop all layers until the root-layer is reached",
    "lineNumber": 181,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "<p align=\"center\">\n  <img src=\"https://cdn.rawgit.com/screeny05/corrode/master/corrode.svg?raw=true\" alt=\"∆ corrode\" width=\"330\"/>\n</p>\n---\n\n[![MIT license](https://img.shields.io/npm/l/corrode.svg?style=flat-square)](./LICENSE)\n[![NPM version](https://img.shields.io/npm/v/corrode.svg?style=flat-square)](https://www.npmjs.com/package/corrode)\n[![dependencies](https://img.shields.io/david/screeny05/corrode.svg?style=flat-square)](https://david-dm.org/screeny05/corrode)\n[![coverage](https://img.shields.io/coveralls/screeny05/corrode.svg?style=flat-square)](https://coveralls.io/github/screeny05/corrode)\n[![build status](https://img.shields.io/travis/screeny05/corrode.svg?style=flat-square)](https://travis-ci.org/screeny05/corrode)\n[![docs](https://doc.esdoc.org/github.com/screeny05/corrode/badge.svg)](https://doc.esdoc.org/github.com/screeny05/corrode/)\n\nCorrode is a batteries-included library for reading binary data. It helps you converting that blob-mess into useable data.\n\nUse it to parse _that one_ obscure binary-file with the help of JavaScript.\n\n#### Install\n```\n$ npm install --save corrode\n```\n\n#### Tests\n```\n$ npm test\n```\n\n#### Offline Docs\n```\n$ npm run docs\n$ open doc/index.html\n```\n\n\n## What's this?\ncorrode provides standard read-actions like uint8-uint64 for big & little endian, strings, buffers and control-structures like loops, skipping, etc. for your buffers and files.\nAdditionally you can use assertions to always be sure, the data you parse corresponds to a specified format.\nThe parsing is done not by a configuration-object, but by imperative code, allowing for far greater flexibility.\n\ncorrode is an abstraction on top of `TransformStream` and as such is pipeable to but also provides functions for more simple usage.\n\nThis library is not only heavily inspired by [dissolve](https://github.com/deoxxa/dissolve), it in fact can be seen as a total rewrite with even more features.\nThe code is written in ES7, fully documented and tested.\n\n\n## Quick examples\n```javascript\nconst Corrode = require('corrode');\nconst parser = new Corrode();\n\nparser\n    .uint8('val_1')\n    .uint32('val_2')\n    .int16be('val_3')\n    .tap(function(){\n        console.log(this.vars.val_1 * this.vars.val_3);\n    })\n    .repeat('array', 5, function(){\n        this\n            .uint32('array_val_1')\n            .string('array_val_4', 5);\n    });\n```\n\n#### Parsing a buffer\n```javascript\nparser.fromBuffer(buffer, () => console.log(parser.vars));\n```\n\n#### Parsing a filestream\n```javascript\nvar stream = fs.createReadStream(file);\nstream.pipe(parser);\nparser.on('finish', () => console.log(parser.vars));\n```\n\nThese are just some of the very basic operations supported by Corrode.\n\n\n## Examples\nAll examples can be found in the examples/-folder. Included:\n* ID3v2.3-Parser - strict, unforgiving parser for a subset of the standard used to store meta-data in mp3-files. It needs `npm i image-to-ascii temp` and can be run with `node examples/id3 test.mp3`.\n\nIf you'd like to include your own examples, just open a PR. I'm more than happy to not have to think about existing complex structured binary data to parse myself.\n\n\n## Documentation & API Reference\n* [Corrode Overview](https://doc.esdoc.org/github.com/screeny05/corrode/manual/overview.html)\n* [API Reference](https://doc.esdoc.org/github.com/screeny05/corrode/identifiers.html)\n* [Getting Started](https://doc.esdoc.org/github.com/screeny05/corrode/manual/tutorial.html)\n\n\n## Why use corrode over dissolve\nIt solves most of the major shortcomings dissolve has:\n* EOF terminates corrode. If not explicitly asked not to do so it will give you all variables, without you having to fiddle with its intestines.\n* Loops get unwinded correctly.\n* Thoroughly tested.\n* As a js-library from 2016 it has all the swag you need.\n\n\n## When not to use corrode\n* Your data is too complex - If you need to apply black magic on your data, to retrieve meaningful values, corrode currently may not support your use-case.\n* Your data is really simple - If you don't need to read structured data, but instead just numbers or strings you should simply use the built-in read-functions provided by `Buffer`.\n\nNot yet included are additions like bignum-support for int64 and additional non-node-standard-encodings.\n\ncorrode is currently not tested for use in browsers.\n\n\n## Used dependencies (3)\nThe following dependencies are installed when installing corrode:\n* bl - used for buffering data, in case a job gets greedy or you don't want to auto-flush\n* readable-streams - ensures consistent and stable behaviour of the underlying Transform-Stream\n* lodash - several utility functions\n\n\n## License\nThis library is issued under the [MIT license](./LICENSE).\n\nThe Logo is from The Noun Project, created by [Michael Senkow](https://thenounproject.com/mhsenkow/) and licensed under the [CC-BY-3.0](https://creativecommons.org/licenses/by/3.0/us/).\n",
    "longname": "/Users/screeny/src/corrode/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"corrode\",\n  \"version\": \"1.0.4\",\n  \"description\": \"A batteries-included library for reading binary data.\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"src/index.js\",\n  \"scripts\": {\n    \"build\": \"babel src --out-dir dist --source-maps\",\n    \"watch\": \"npm run build -- --watch\",\n    \"test\": \"mocha test --compilers js:babel-register ./test\",\n    \"lint\": \"eslint src\",\n    \"docs\": \"esdoc2 -c esdoc.json\",\n    \"coverage\": \"nyc --require babel-core/register --reporter=lcov mocha\",\n    \"coverall\": \"nyc npm test && nyc report --reporter=text-lcov | coveralls\",\n    \"prepublish\": \"npm run build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/screeny05/corrode.git\"\n  },\n  \"author\": \"Sebastian Langer <sl@scn.cx>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/screeny05/corrode/issues\"\n  },\n  \"homepage\": \"https://github.com/screeny05/corrode\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.10.1\",\n    \"babel-eslint\": \"^6.1.0\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-register\": \"^6.9.0\",\n    \"buffer-safe\": \"^1.0.0\",\n    \"chai\": \"^3.5.0\",\n    \"coveralls\": \"^2.11.9\",\n    \"esdoc2\": \"^2.1.3\",\n    \"esdoc2-coverage-plugin\": \"^2.0.0\",\n    \"esdoc2-ecmascript-proposal-plugin\": \"^2.0.0\",\n    \"esdoc2-publish-html-plugin\": \"^2.0.1\",\n    \"esdoc2-standard-plugin\": \"^2.1.0\",\n    \"eslint\": \"^3.0.0\",\n    \"eslint-config-xo\": \"^0.15.2\",\n    \"eslint-plugin-babel\": \"^3.3.0\",\n    \"istanbul\": \"^0.4.4\",\n    \"lodash\": \"^4.13.1\",\n    \"mocha\": \"^2.5.3\",\n    \"nyc\": \"^6.6.1\"\n  },\n  \"dependencies\": {\n    \"bl\": \"^1.1.2\",\n    \"lodash\": \"^4.17.2\",\n    \"readable-stream\": \"^2.2.2\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"xo/esnext\",\n    \"rules\": {\n      \"indent\": [\n        \"error\",\n        4\n      ],\n      \"keyword-spacing\": 0,\n      \"space-before-function-paren\": [\n        2,\n        \"never\"\n      ],\n      \"space-before-blocks\": [\n        2,\n        \"never\"\n      ]\n    }\n  }\n}\n",
    "longname": "/Users/screeny/src/corrode/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/screeny/src/corrode/docs-md/overview.md",
    "name": "./docs-md/overview.md",
    "content": "# Overview\n\n## Components\nCorrode consists of 5 components:\n1. The [VariableStack](https://doc.esdoc.org/github.com/screeny05/corrode/class/src/variable-stack.js~VariableStack.html). It handles all things variables when reading data, pushing structures and looping bytes.\n2. The [CorrodeBase](https://doc.esdoc.org/github.com/screeny05/corrode/class/src/base.js~CorrodeBase.html). This is the part of corrode, reading all bytes. It's the low-level part handling all the small things, preventing you from shooting yourself into the foot. Of course, it also enables you to do just that, if you explicitly ask for it.\n3. The [Assertions](). Just like your assertion-library of choice these ensure you read correct data. If not it will abort mission.\n4. The [Mappers](). Doing all the bulk parts of work for you, the mappers ensure your data is in the way you need it to be. Think of these like JavaScripts Array.prototype.map. Except for bits and bytes.\n5. Corrode itself. This is the only thing you - as a developer - are directly in contact with. It connects The CorrodeBase with the Assertions and Mappers to provide a unified interface.\n\nFor more info on each of those see the Reference.\n\nFor info on ways to configure corrode to your liking, see Configuration.\n\n## The Assertions\nAsserts help you to make sure, the buffer you're parsing is in the correct format.\nThese assertions are like chai, throwing an error when an assertion doesn't hold.\n\nThese functions won't modify your variables.\n\nAll assertions can be called from a Corrode instance like this:\n```javascript\nparser.assert.equal('var', 5);\n```\n\n\n## The Mappers\nThese functions provide basic mapping-abilities for Corrode's VariableStack.\n\nImagine them like this:\n```javascript\nconst parser = new Corrode();\nparser.uint8('value').map.double('value');\n```\n\nOf course there's no existing mapping-function which doubles a value (yet?).\nBut the concept is that they are functions receiving a value, processing it\nand saving a new value in the {@link VariableStack} in place of the old one.\n\nThe imaginary code above would yield `{ value: 4 }`, parsing a buffer like this `[2]`.\n\nNote that all mappers don't check for existance, validity or other assumptions.\nYou have to do that yourself with assertions.\n\n\n## When will i be able to access the variables? (Extensions, Asserts & Mappers)\n\n## Corrode#position / Corrode#skip issues (isSeeking)\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/screeny/src/corrode/docs-md/configuration.md",
    "name": "./docs-md/configuration.md",
    "content": "# Configuration\n\nCorrode provides some configuration-options. These are either defaults, safeguards or advanced-user-stuff.\n\nCorrode accepts an object as its first parameter, containing options.\n\nThese options also get passed on to the TransformStream-constructor, so [those](https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options) [options](https://nodejs.org/api/stream.html#stream_new_stream_readable_options) are also valid.\n\n\n## `endianness`\n**default:** `'LE'`\n\n**accepts:** `'LE', 'BE'` (for little endian & big endian)\n\nIf you use methods like `.uint8()` or `.int32()` this option determines what endianness corrode uses when reading your bytes.\n\nOf course using `.uint16be()` or `.doublele()` will overwrite this default, as you'd expect.\n\n\n## `loopIdentifier`\n**default:** `Symbol(loop-variable)`\n\n**accepts:** Anything which can be used as an identifier in an object.\n\nDetermines the identifier of the temporary variable which gets created when using `.loop()`.\n\n\n## `encoding`\n**default:** `'utf8'`\n\n**accepts:** Any encoding `Buffer.prototype.toString` accepts. [Full list here](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings).\n\nDetermines which encoding to use for string-functions like `.string()` or `.terminatedString()`. Can be overwitten on a per-use-basis by the functions themselves.\n\n\n## `finishJobsOnEOF`\n**default:** `true`\n\n**accepts:** `true, false`\n\nDetermines whether or not to finish everything up, once corrode encounters the end of the stream being piped into corrode, or the end of the buffer.\n\nSet to `false` if you want to parse a file which was split in two or more parts. Or somethin along those lines.\n\nWhat this flag does in detail is to clean up all remaining jobs from the job list, which are read-related, once EOF is reached. Then the job list will be worked on, until there are no more jobs. Meaning all VariableStack-Layers have been popped, giving you access to all that sweet data of yours.\n\n\n## `anonymousLoopDiscardDeep`\n**default:** `false`\n\n**accepts:** `true, false`\n\nCorrode provides the `discard()` function inside `.loop()`- and `.repeat()`-callbacks. If you use those anonymously (meaning you don't push an array onto the variable-stack by giving a string as the first parameter) and then call the `discard()` function, corrode will discard whatever data you read, and restore what's been there before.\n\nBy default this is done in a shallow way, meaning that corrode will clone the users data before the callback is called shallowly by using `Object.assign()` and that shallow copy gets assigned again when calling `discard()`.\n\nThis may lead to problems, when modifiyng objects within the curren VariableStack-layer. Those won't get replaced with their original version.\n\nTo circumvent this problem you can set this option to true. This is not done, because probably no-one needs this, and it may be a huge performance-hit to clone an entire object, everytime the loop-callback is called.\n\n\n## `strictObjectMode`\n**default:** `true`\n\n**accepts:** `true, false`\n\nWhen this option is set to true, corrode will prevent you from pushing into anything that's not an object. Meaning moves like this:\n```javascript\nparser.uint8('val').tap('val', function(){});\n```\nwill throw an error. This way corrode provides a naive way of type-safety.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/screeny/src/corrode/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## corrode v1.0.2\n* Update ESDoc to v0.5.2 for better ES7 support\n\n## corrode v1.0.1\n* Update lodash from 4.16.1 to 4.17.2\n* Update readable-stream from 2.1.5 to 2.2.2\n* Fix http links in npm-shrinkwrap.json\n\n## corrode v1.0.0\n* Initial release. Any Changes prior to this version are merged into this one.\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 187,
    "kind": "testFile",
    "name": "test/assert.test.js",
    "content": "const expect = require('chai').expect;\nconst fixture = require('./fixtures/vars');\nconst assert = require('../src/assert');\nconst utils = require('../src/utils');\n\ndescribe('Assert', () => {\n    beforeEach(function(){\n        this.fixture = fixture.clone();\n\n        this.assert = function(name, ...args){\n            let assertFn = utils.bindObject(assert, { vars: this.fixture });\n            return assertFn[name].bind(assertFn, ...args);\n        };\n    });\n\n    /** @test {equal} */\n    it('asserts equal', function(){\n        expect(this.assert('equal', 'string', 'fixture')).to.not.throw(TypeError);\n        expect(this.assert('equal', 'string', 'wrong')).to.throw(TypeError);\n        expect(this.assert('equal', 'number', 1337)).to.not.throw(TypeError);\n        expect(this.assert('equal', 'number', 0)).to.throw(TypeError);\n    });\n\n    /** @test {allEqual} */\n    it('asserts allEqual for objects', function(){\n        expect(this.assert('allEqual', 'objectWithSameValues', 'fixture')).to.not.throw(TypeError);\n        expect(this.assert('allEqual', 'objectWithSameValues', 'wrong')).to.throw(TypeError);\n        expect(this.assert('allEqual', 'objectWithSameValues')).to.not.throw(TypeError);\n        expect(this.assert('allEqual', 'object', 'wrong')).to.throw(TypeError);\n        expect(this.assert('allEqual', 'object')).to.throw(TypeError);\n    });\n\n    /** @test {allEqual} */\n    it('asserts allEqual for arrays', function(){\n        expect(this.assert('allEqual', 'arrayWithSameValues', 'fixture')).to.not.throw(TypeError);\n        expect(this.assert('allEqual', 'arrayWithSameValues', 'wrong')).to.throw(TypeError);\n        expect(this.assert('allEqual', 'arrayWithSameValues')).to.not.throw(TypeError);\n        expect(this.assert('allEqual', 'array', 'wrong')).to.throw(TypeError);\n        expect(this.assert('allEqual', 'array')).to.throw(TypeError);\n    });\n\n    /** @test {deepEqual} */\n    it('asserts deepEqual', function(){\n        expect(this.assert('deepEqual', 'objectWithSameValues', this.fixture.objectWithSameValues)).to.not.throw(TypeError);\n        expect(this.assert('deepEqual', 'objectWithSameValues', this.fixture.object)).to.throw(TypeError);\n        expect(this.assert('deepEqual', 'object', this.fixture.object)).to.not.throw(TypeError);\n        expect(this.assert('deepEqual', 'object', this.fixture.objectWithSameValues)).to.throw(TypeError);\n    });\n\n    /** @test {includes} */\n    it('asserts includes for arrays', function(){\n        expect(this.assert('includes', 'string', ['fixture'])).to.not.throw(TypeError);\n        expect(this.assert('includes', 'string', ['wrong'])).to.throw(TypeError);\n    });\n\n    /** @test {includes} */\n    it('asserts includes for objects', function(){\n        expect(this.assert('includes', 'string', { child: 'fixture' })).to.not.throw(TypeError);\n        expect(this.assert('includes', 'string', { child: 'wrong' })).to.throw(TypeError);\n    });\n\n    /** @test {inBounds} */\n    it('asserts inBounds', function(){\n        expect(this.assert('inBounds', 'negative', this.fixture.array)).to.throw(TypeError);\n        expect(this.assert('inBounds', 'zero', this.fixture.array)).to.not.throw(TypeError);\n        expect(this.assert('inBounds', 'one', this.fixture.array)).to.not.throw(TypeError);\n        expect(this.assert('inBounds', 'two', this.fixture.array)).to.not.throw(TypeError);\n        expect(this.assert('inBounds', 'three', this.fixture.array)).to.throw(TypeError);\n    });\n\n    /** @test {callback} */\n    it('asserts via callback', function(){\n        expect(this.assert('callback', 'string', val => true)).to.not.throw(TypeError);\n        expect(this.assert('callback', 'string', val => false)).to.throw(TypeError);\n        expect(this.assert('callback', 'string', val => true, 'custom')).to.not.throw(TypeError);\n        expect(this.assert('callback', 'string', val => false, 'custom')).to.throw(TypeError);\n    });\n\n    /** @test {arrayLength} */\n    it('asserts arrayLength', function(){\n        expect(this.assert('arrayLength', 'array', 3)).to.not.throw(TypeError);\n        expect(this.assert('arrayLength', 'array', -1)).to.throw(TypeError);\n        expect(this.assert('arrayLength', 'array', 2)).to.throw(TypeError);\n        expect(this.assert('arrayLength', 'array', 4)).to.throw(TypeError);\n    });\n\n    /** @test {exists} */\n    it('asserts exists', function(){\n        expect(this.assert('exists', 'array')).to.not.throw(TypeError);\n        expect(this.assert('exists', 'string')).to.not.throw(TypeError);\n        expect(this.assert('exists', 'number')).to.not.throw(TypeError);\n        expect(this.assert('exists', 'wrong')).to.throw(TypeError);\n        expect(this.assert('exists', -1)).to.throw(TypeError);\n    });\n\n    /** @test {bitmask} */\n    it('asserts bitmask', function(){\n        expect(this.assert('bitmask', 'bitmask1', this.fixture.bitmask1)).to.not.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask1', this.fixture.bitmask2)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask2', this.fixture.bitmask1)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask2', this.fixture.bitmask2)).to.not.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmaskMatch', this.fixture.bitmask1)).to.not.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmaskMatch', this.fixture.bitmask2)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask1', this.fixture.bitmask1, false)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask1', this.fixture.bitmask2, false)).to.not.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask2', this.fixture.bitmask1, false)).to.not.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmask2', this.fixture.bitmask2, false)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmaskMatch', this.fixture.bitmask1, false)).to.throw(TypeError);\n        expect(this.assert('bitmask', 'bitmaskMatch', this.fixture.bitmask2, false)).to.not.throw(TypeError);\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/assert.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/assert.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/assert.test.js~describe0",
    "access": null,
    "description": "Assert",
    "lineNumber": 6
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it1",
    "access": null,
    "description": "asserts equal",
    "lineNumber": 17,
    "testTargets": [
      "equal"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it2",
    "access": null,
    "description": "asserts allEqual for objects",
    "lineNumber": 25,
    "testTargets": [
      "allEqual"
    ]
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it3",
    "access": null,
    "description": "asserts allEqual for arrays",
    "lineNumber": 34,
    "testTargets": [
      "allEqual"
    ]
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it4",
    "access": null,
    "description": "asserts deepEqual",
    "lineNumber": 43,
    "testTargets": [
      "deepEqual"
    ]
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it5",
    "access": null,
    "description": "asserts includes for arrays",
    "lineNumber": 51,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it6",
    "access": null,
    "description": "asserts includes for objects",
    "lineNumber": 57,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it7",
    "access": null,
    "description": "asserts inBounds",
    "lineNumber": 63,
    "testTargets": [
      "inBounds"
    ]
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it8",
    "access": null,
    "description": "asserts via callback",
    "lineNumber": 72,
    "testTargets": [
      "callback"
    ]
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it9",
    "access": null,
    "description": "asserts arrayLength",
    "lineNumber": 80,
    "testTargets": [
      "arrayLength"
    ]
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it10",
    "access": null,
    "description": "asserts exists",
    "lineNumber": 88,
    "testTargets": [
      "exists"
    ]
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/assert.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assert.test.js~describe0.it11",
    "access": null,
    "description": "asserts bitmask",
    "lineNumber": 97,
    "testTargets": [
      "bitmask"
    ]
  },
  {
    "__docId__": 200,
    "kind": "testFile",
    "name": "test/base-aborts.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#jobLoop} */\ndescribe('CorrodeBase - Aborts', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    it('correctly aborts too short int16', function(done){\n        this.base.int16('val');\n        this.eqArray([1], done, {});\n    });\n\n    it('correctly aborts too short int32', function(done){\n        this.base.int32('val');\n        this.eqArray([1, 2, 3], done, {});\n    });\n\n    it('correctly aborts too short int64', function(done){\n        this.base.int64('val');\n        this.eqArray([1, 2, 3, 4, 5, 6, 7], done, {});\n    });\n\n    it('correctly aborts too short float', function(done){\n        this.base.float('val');\n        this.eqArray([1, 2, 3], done, {});\n    });\n\n    it('correctly aborts too short double', function(done){\n        this.base.double('val');\n        this.eqArray([1, 2, 3, 4, 5, 6, 7], done, {});\n    });\n\n    it('correctly aborts too short string', function(done){\n        this.base.string('foo', 2);\n        this.eqArray([1], done, {});\n    });\n\n    it('correctly aborts too short buffer', function(done){\n        this.base.buffer('foo', 2);\n        this.eqArray([1], done, {});\n    });\n\n    it('correctly aborts too short skip', function(done){\n        this.base\n            .uint8('var_1')\n            .skip(10)\n            .uint8('var_2');\n\n        this.eqArray([2, 0], done, {\n            var_1: 2\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-aborts.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/base-aborts.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12",
    "access": null,
    "description": "CorrodeBase - Aborts",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#jobLoop"
    ]
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it13",
    "access": null,
    "description": "correctly aborts too short int16",
    "lineNumber": 11
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it14",
    "access": null,
    "description": "correctly aborts too short int32",
    "lineNumber": 16
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it15",
    "access": null,
    "description": "correctly aborts too short int64",
    "lineNumber": 21
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it16",
    "access": null,
    "description": "correctly aborts too short float",
    "lineNumber": 26
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it17",
    "access": null,
    "description": "correctly aborts too short double",
    "lineNumber": 31
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it18",
    "access": null,
    "description": "correctly aborts too short string",
    "lineNumber": 36
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it19",
    "access": null,
    "description": "correctly aborts too short buffer",
    "lineNumber": 41
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/base-aborts.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-aborts.test.js~describe12.it20",
    "access": null,
    "description": "correctly aborts too short skip",
    "lineNumber": 46
  },
  {
    "__docId__": 210,
    "kind": "testFile",
    "name": "test/base-edge-cases.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase} */\ndescribe('CorrodeBase - Edge Cases', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    /** @test {CorrodeBase#jobLoop} */\n    it('correctly overrides primitves', function(done){\n        this.base\n            .uint8('var')\n            .uint8('var');\n\n        this.eqArray([1, 2, 3], done, {\n            var: 2\n        });\n    });\n\n    /** @test {CorrodeBase#string} */\n    it('considers strings as length as references to vars - strings', function(done){\n        this.base\n            .uint8('length')\n            .string('string', 'length');\n\n        this.eqArray([2, 0x21, 0x22], done, {\n            length: 2,\n            string: '!\"'\n        });\n    });\n\n    /** @test {CorrodeBase#buffer} */\n    it('considers strings as length as references to vars - buffers', function(done){\n        this.base\n            .uint8('length')\n            .buffer('buffer', 'length');\n\n        this.eqArray([2, 0x21, 0x22], done, {\n            length: 2,\n            buffer: Buffer.from([0x21, 0x22])\n        });\n    });\n\n    /** @test {CorrodeBase#skip} */\n    it('considers strings as length as references to vars - skip', function(done){\n        this.base\n            .uint8('length')\n            .skip('length')\n            .uint8('var_1')\n\n        this.eqArray([2, 1, 2, 3, 4], done, {\n            length: 2,\n            var_1: 3\n        });\n    });\n\n    /** @test {CorrodeBase#string} */\n    it('throws errors for invalid variables when using strings as length as references to vars - strings', function(){\n        this.base\n            .uint8('unknown')\n            .string('string', 'length');\n\n        expect(this.eqArray.bind(this, [2, 0x21, 0x22], () => {}, {})).to.throw(TypeError);\n    });\n\n    /** @test {CorrodeBase#buffer} */\n    it('throws errors for invalid variables when using strings as length as references to vars - buffers', function(){\n        this.base\n            .uint8('unknown')\n            .buffer('buffer', 'length');\n\n        expect(this.eqArray.bind(this, [2, 0x21, 0x22], () => {}, {})).to.throw(TypeError);\n    });\n\n    /** @test {CorrodeBase#skip} */\n    it('throws errors for invalid variables when using strings as length as references to vars - skip', function(){\n        this.base\n            .uint8('unknown')\n            .skip('length')\n            .uint8('var_1')\n\n        expect(this.eqArray.bind(this, [2, 1, 2, 3, 4], () => {}, {})).to.throw(TypeError);\n    });\n\n    /**\n     * @test {CorrodeBase#chunkOffset}\n     * @test {CorrodeBase#streamOffset}\n    */\n    it('has the correct offset', function(done){\n        this.base\n            .uint8('var_1')\n            .tap(function(){\n                expect(this.chunkOffset).to.equal(1);\n                expect(this.streamOffset).to.equal(1);\n            })\n            .uint8('var_2')\n            .uint8('var_3')\n            .tap(function(){\n                expect(this.chunkOffset).to.equal(1);\n                expect(this.streamOffset).to.equal(3);\n            });\n\n        this.eqMultiArray([[1, 2], [3], [4]], done, {\n            var_1: 1,\n            var_2: 2,\n            var_3: 3\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-edge-cases.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/base-edge-cases.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21",
    "access": null,
    "description": "CorrodeBase - Edge Cases",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase"
    ]
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it22",
    "access": null,
    "description": "correctly overrides primitves",
    "lineNumber": 13,
    "testTargets": [
      "CorrodeBase#jobLoop"
    ]
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it23",
    "access": null,
    "description": "considers strings as length as references to vars - strings",
    "lineNumber": 24,
    "testTargets": [
      "CorrodeBase#string"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it24",
    "access": null,
    "description": "considers strings as length as references to vars - buffers",
    "lineNumber": 36,
    "testTargets": [
      "CorrodeBase#buffer"
    ]
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it25",
    "access": null,
    "description": "considers strings as length as references to vars - skip",
    "lineNumber": 48,
    "testTargets": [
      "CorrodeBase#skip"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it26",
    "access": null,
    "description": "throws errors for invalid variables when using strings as length as references to vars - strings",
    "lineNumber": 61,
    "testTargets": [
      "CorrodeBase#string"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it27",
    "access": null,
    "description": "throws errors for invalid variables when using strings as length as references to vars - buffers",
    "lineNumber": 70,
    "testTargets": [
      "CorrodeBase#buffer"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it28",
    "access": null,
    "description": "throws errors for invalid variables when using strings as length as references to vars - skip",
    "lineNumber": 79,
    "testTargets": [
      "CorrodeBase#skip"
    ]
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/base-edge-cases.test.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-edge-cases.test.js~describe21.it29",
    "access": null,
    "description": "has the correct offset",
    "lineNumber": 92,
    "testTargets": [
      "CorrodeBase#chunkOffset",
      "CorrodeBase#streamOffset"
    ]
  },
  {
    "__docId__": 220,
    "kind": "testFile",
    "name": "test/base-flags.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#options} */\ndescribe('CorrodeBase#options', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly finishes primitive jobs on EOF', function(done){\n        this.base\n            .uint8('var_1')\n            .uint8('var_2')\n            .uint8('var_3')\n            .uint8('var_4')\n            .uint8('var_5');\n\n        this.eqArray([1, 2, 3], done, vars => {\n            expect(vars).to.deep.equal({\n                var_1: 1,\n                var_2: 2,\n                var_3: 3\n            });\n            expect(this.base.jobs).to.be.empty;\n        });\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly finishes tap jobs on EOF', function(done){\n        this.base\n            .uint8('var_1')\n            .tap('struct', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3')\n                    .uint8('var_4');\n            });\n\n        this.eqArray([1, 2, 3], done, vars => {\n            expect(vars).to.deep.equal({\n                var_1: 1,\n                struct: {\n                    var_2: 2,\n                    var_3: 3\n                }\n            });\n            expect(this.base.jobs).to.be.empty;\n        });\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly finishes loop jobs on EOF', function(done){\n        this.base\n            .uint8('var_1')\n            .loop('loop', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3');\n            });\n\n        this.eqArray([1, 2, 3, 4, 5, 6], done, vars => {\n            expect(vars).to.deep.equal({\n                var_1: 1,\n                loop: [{\n                    var_2: 2,\n                    var_3: 3\n                }, {\n                    var_2: 4,\n                    var_3: 5\n                }, {\n                    var_2: 6\n                }]\n            });\n            expect(this.base.jobs).to.be.empty;\n        });\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly finishes nested jobs on EOF', function(done){\n        this.base\n            .uint8('var_1')\n            .loop('loop', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3')\n                    .tap('innerStruct', function(){\n                        this\n                            .uint8('var_4')\n                            .loop('innerLoop', function(finish, discard, i){\n                                this\n                                    .uint8('var_5')\n                                    .uint8('var_6');\n\n                                if(i >= 1){\n                                    finish();\n                                }\n                            });\n                    });\n            });\n\n        this.eqArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], done, {\n            var_1: 1,\n            loop: [{\n                var_2: 2,\n                var_3: 3,\n                innerStruct: {\n                    var_4: 4,\n                    innerLoop: [{\n                        var_5: 5,\n                        var_6: 6\n                    }, {\n                        var_5: 7,\n                        var_6: 8\n                    }]\n                }\n            }, {\n                var_2: 9,\n                var_3: 10,\n                innerStruct: {\n                    var_4: 11,\n                    innerLoop: [{\n                        var_5: 12,\n                        var_6: 13\n                    }, {\n                        var_5: 14\n                    }]\n                }\n            }]\n        });\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly rests in the current state when finishJobsOnEOF is false - tap', function(done){\n        this.base = new Base({ finishJobsOnEOF: false });\n\n        this.base\n            .uint8('var_1')\n            .tap('struct', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3')\n                    .uint8('var_4');\n            });\n\n        this.eqArray([1, 2, 3], done, () => {\n            expect(this.base.varStack.top.isRoot).to.not.be.true;\n            expect(this.base.varStack.stack.length).to.be.greaterThan(1);\n            expect(this.base.jobs).to.not.be.empty;\n        });\n    });\n\n    /** @test {CorrodeBase#options.finishJobsOnEOF} */\n    it('correctly rests in the current state when finishJobsOnEOF is false - loop', function(done){\n        this.base = new Base({ finishJobsOnEOF: false });\n\n        this.base\n            .uint8('var_1')\n            .loop('loop', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3')\n                    .uint8('var_4');\n            });\n\n        this.eqArray([1, 2, 3], done, () => {\n            expect(this.base.varStack.peek()[this.base.options.loopIdentifier]).to.exist;\n            expect(this.base.varStack.top.isRoot).to.not.be.true;\n            expect(this.base.varStack.stack.length).to.be.greaterThan(1);\n            expect(this.base.jobs).to.not.be.empty;\n        });\n    });\n\n    /** @test {CorrodeBase#options.loopIdentifier} */\n    it('should not be disturbed, when changing the loopIdentifier', function(done){\n        this.base = new Base({ loopIdentifier: '__loop' });\n\n        this.base.loop('loop', function(){\n            this.uint8('var');\n        });\n\n        this.eqArray([1, 2, 3], done, {\n            loop: [{\n                var: 1\n            }, {\n                var: 2\n            }, {\n                var: 3\n            }]\n        });\n    });\n\n    /** @test {CorrodeBase#isSeeking} */\n    it('flushes when isSeeking = false', function(done){\n        this.base.loop('loop', function(){\n            this.uint8('var');\n        });\n\n        this.eqMultiArray([[1], [2], [3], [4, 5], [6], [7], [8, 9], [0]], done, () => {\n            expect(this.base.streamBuffer.length).to.equal(0);\n        });\n    });\n\n    /** @test {CorrodeBase#isSeeking} */\n    it('prevents flushes when isSeeking = true', function(done){\n        this.base.isSeeking = true;\n\n        this.base.loop('loop', function(){\n            this.uint8('var');\n        });\n\n        this.eqMultiArray([[1], [2], [3], [4, 5], [6], [7], [8, 9], [0]], done, () => {\n            expect(this.base.streamBuffer.length).to.equal(10);\n        });\n    });\n\n    /** @test {CorrodeBase#isSeeking} */\n    it('allows mixing of isSeeking-modes', function(done){\n        this.base.loop('loop', function(end, discard, i){\n            this.uint8('var');\n\n            if(i >= 8){\n                this.isSeeking = true;\n            }\n        });\n\n        this.eqMultiArray([[1], [2], [3], [4], [5], [6], [7], [8], [9], [0]], done, () => {\n            expect(this.base.streamBuffer.length).to.equal(2);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-flags.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/base-flags.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-flags.test.js~describe30",
    "access": null,
    "description": "CorrodeBase#options",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#options"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it31",
    "access": null,
    "description": "correctly finishes primitive jobs on EOF",
    "lineNumber": 13,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it32",
    "access": null,
    "description": "correctly finishes tap jobs on EOF",
    "lineNumber": 32,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it33",
    "access": null,
    "description": "correctly finishes loop jobs on EOF",
    "lineNumber": 55,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it34",
    "access": null,
    "description": "correctly finishes nested jobs on EOF",
    "lineNumber": 82,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it35",
    "access": null,
    "description": "correctly rests in the current state when finishJobsOnEOF is false - tap",
    "lineNumber": 136,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it36",
    "access": null,
    "description": "correctly rests in the current state when finishJobsOnEOF is false - loop",
    "lineNumber": 156,
    "testTargets": [
      "CorrodeBase#options.finishJobsOnEOF"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it37",
    "access": null,
    "description": "should not be disturbed, when changing the loopIdentifier",
    "lineNumber": 177,
    "testTargets": [
      "CorrodeBase#options.loopIdentifier"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it38",
    "access": null,
    "description": "flushes when isSeeking = false",
    "lineNumber": 196,
    "testTargets": [
      "CorrodeBase#isSeeking"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it39",
    "access": null,
    "description": "prevents flushes when isSeeking = true",
    "lineNumber": 207,
    "testTargets": [
      "CorrodeBase#isSeeking"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/base-flags.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-flags.test.js~describe30.it40",
    "access": null,
    "description": "allows mixing of isSeeking-modes",
    "lineNumber": 220,
    "testTargets": [
      "CorrodeBase#isSeeking"
    ]
  },
  {
    "__docId__": 232,
    "kind": "testFile",
    "name": "test/base-loop-anonymous.test.js",
    "content": "const expect = require('chai').expect;\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#loop} */\ndescribe('CorrodeBase#loop - anonymous', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n\n    it('anonymous loop (overriding)', function(done){\n        this.base.loop(function(finish, discard, i){\n            this.uint8('var');\n            this.vars.iterations = i + 1;\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var: 5,\n            iterations: 5\n        });\n    });\n\n    it('anonymous loop (scope)', function(done){\n        this.base.loop(function(){\n            if(typeof this.vars.iterations === 'undefined'){\n                this.vars.iterations = 0;\n            }\n            this.vars.iterations++;\n\n            this.uint8('var');\n        });\n\n        this.eqArray([1, 2, 3], done, {\n            iterations: 3,\n            var: 3\n        });\n    });\n\n    it('anonymous loop (no discard, no finish)', function(done){\n        this.base.loop(function(finish, discard, i){\n            this.vars['it_' + i] = i;\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var_0: 1,\n            var_1: 2,\n            var_2: 3,\n            var_3: 4,\n            var_4: 5,\n            it_0: 0,\n            it_1: 1,\n            it_2: 2,\n            it_3: 3,\n            it_4: 4\n        });\n    });\n\n    it('anonymous loop (no discard, finish after)', function(done){\n        this.base.loop(function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 2){\n                finish();\n            }\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var_0: 1,\n            var_1: 2,\n            var_2: 3\n        });\n    });\n\n    it('anonymous loop (no discard, finish before)', function(done){\n        this.base.loop(function(finish, discard, i){\n            if(i >= 3){\n                return finish();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var_0: 1,\n            var_1: 2,\n            var_2: 3\n        });\n    });\n\n    it('anonymous loop (discard before, no finish)', function(done){\n        this.base.loop(function(finish, discard, i){\n            if(i % 2 !== 0){\n                discard();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6], done, {\n            var_0: 0,\n            var_2: 2,\n            var_4: 4,\n            var_6: 6\n        });\n    });\n\n    it('anonymous loop (discard after, no finish)', function(done){\n        this.base.loop(function(finish, discard, i){\n            this\n                .uint8('var_' + i)\n                .tap(function(){\n                    if(this.vars['var_' + i] % 2 !== 0){\n                        discard();\n                    }\n                });\n            if(i % 3 === 0){\n                discard();\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6], done, {\n            var_2: 2,\n            var_4: 4\n        });\n    });\n\n    /** @test {CorrodeBase#options.anonymousLoopDiscardDeep} */\n    it('anonymous loop (discard deep, no finish)', function(done){\n        this.base = new Base({ anonymousLoopDiscardDeep: true });\n\n        this.base.loop(function(finish, discard, i){\n            if(!this.vars['fix']){\n                this.vars['fix'] = { iterations: 0, arr: [] };\n            }\n            this.vars.fix.iterations++;\n            this.vars.fix.arr.push(i);\n\n            this.uint8('var_' + i);\n            if(i % 2 !== 0){\n                discard();\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6, 7], done, {\n            fix: {\n                iterations: 4,\n                arr: [0, 2, 4, 6]\n            },\n            var_0: 0,\n            var_2: 2,\n            var_4: 4,\n            var_6: 6\n        });\n    });\n\n    /** @test {CorrodeBase#options.anonymousLoopDiscardDeep} */\n    it('anonymous loop (discard shallow, no finish)', function(done){\n        this.base.loop(function(finish, discard, i){\n            if(!this.vars['fix']){\n                this.vars['fix'] = { iterations: 0, arr: [] };\n            }\n            this.vars.fix.iterations++;\n            this.vars.fix.arr.push(i);\n\n            this.uint8('var_' + i);\n            if(i % 2 !== 0){\n                discard();\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6, 7], done, {\n            fix: {\n                iterations: 8,\n                arr: [0, 1, 2, 3, 4, 5, 6, 7]\n            },\n            var_0: 0,\n            var_2: 2,\n            var_4: 4,\n            var_6: 6\n        });\n    });\n\n    it('anonymous loop (discard, finish before)', function(done){\n        this.base.loop(function(finish, discard, i){\n            if(i >= 3){\n                finish(true);\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var_0: 1,\n            var_1: 2,\n            var_2: 3\n        });\n    });\n\n    it('anonymous loop (discard, finish after)', function(done){\n        this.base.loop(function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 3){\n                finish(true);\n            }\n        });\n\n        this.eqArray([1, 2, 3, 4, 5], done, {\n            var_0: 1,\n            var_1: 2,\n            var_2: 3\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-loop-anonymous.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/base-loop-anonymous.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41",
    "access": null,
    "description": "CorrodeBase#loop - anonymous",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#loop"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it42",
    "access": null,
    "description": "anonymous loop (overriding)",
    "lineNumber": 12
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it43",
    "access": null,
    "description": "anonymous loop (scope)",
    "lineNumber": 24
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it44",
    "access": null,
    "description": "anonymous loop (no discard, no finish)",
    "lineNumber": 40
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it45",
    "access": null,
    "description": "anonymous loop (no discard, finish after)",
    "lineNumber": 60
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it46",
    "access": null,
    "description": "anonymous loop (no discard, finish before)",
    "lineNumber": 75
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it47",
    "access": null,
    "description": "anonymous loop (discard before, no finish)",
    "lineNumber": 90
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it48",
    "access": null,
    "description": "anonymous loop (discard after, no finish)",
    "lineNumber": 106
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it49",
    "access": null,
    "description": "anonymous loop (discard deep, no finish)",
    "lineNumber": 127,
    "testTargets": [
      "CorrodeBase#options.anonymousLoopDiscardDeep"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it50",
    "access": null,
    "description": "anonymous loop (discard shallow, no finish)",
    "lineNumber": 156,
    "testTargets": [
      "CorrodeBase#options.anonymousLoopDiscardDeep"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it51",
    "access": null,
    "description": "anonymous loop (discard, finish before)",
    "lineNumber": 182
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/base-loop-anonymous.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-anonymous.test.js~describe41.it52",
    "access": null,
    "description": "anonymous loop (discard, finish after)",
    "lineNumber": 197
  },
  {
    "__docId__": 245,
    "kind": "testFile",
    "name": "test/base-loop-named.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#loop} */\ndescribe('CorrodeBase#loop - named', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n\n    it('named loop', function(done){\n        this.base.loop('fix', function(){\n            this.uint8('var');\n        });\n\n        this.eqArray([0, 1, 2], done, {\n            fix: [{\n                var: 0\n            }, {\n                var: 1\n            }, {\n                var: 2\n            }]\n        });\n    });\n\n    it('named loop (scope)', function(done){\n        this.base\n            .uint8('rootFix')\n            .loop('fix', function(){\n                if(typeof this.vars.fix === 'undefined'){\n                    this.vars.fix = -1;\n                }\n                this.vars.fix++;\n                this.varStack.peek().rootFix++;\n                this.uint8('var');\n            });\n\n        this.eqArray([0, 0, 1, 2], done, {\n            rootFix: 3,\n            fix: [{\n                fix: 0,\n                var: 0\n            }, {\n                fix: 0,\n                var: 1\n            }, {\n                fix: 0,\n                var: 2\n            }]\n        });\n    });\n\n    it('named loop (no discard, finish after)', function(done){\n        this.base.loop('loop', function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 2){\n                finish();\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            loop: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('named loop (no discard, finish before)', function(done){\n        this.base.loop('loop', function(finish, discard, i){\n            if(i >= 3){\n                return finish();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            loop: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('named loop (discard before, no finish)', function(done){\n        this.base.loop('loop', function(finish, discard, i){\n            if(i % 2 !== 0){\n                discard();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6], done, {\n            loop: [{\n                var_0: 0\n            }, {\n                var_2: 2\n            }, {\n                var_4: 4\n            }, {\n                var_6: 6\n            }]\n        });\n    });\n\n    it('named loop (discard after, no finish)', function(done){\n        this.base\n            .uint8('rootFix')\n            .loop('loop', function(finish, discard, i){\n                this\n                    .uint8('var_' + i)\n                    .tap(function(){\n                        if(this.vars['var_' + i] % 2 !== 0){\n                            discard();\n                        }\n                    });\n                this.varStack.peek().rootFix++;\n                if(i % 3 === 0){\n                    discard();\n                }\n            });\n\n        this.eqArray([0, 0, 1, 2, 3, 4, 5, 6], done, {\n            rootFix: 7,\n            loop: [{\n                var_2: 2\n            }, {\n                var_4: 4\n            }]\n        });\n    });\n\n    it('named loop (discard, finish before)', function(done){\n        this.base.loop('loop', function(finish, discard, i){\n            if(i >= 3){\n                finish(true);\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            loop: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('named loop (discard, finish after)', function(done){\n        this.base.loop('loop', function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 3){\n                finish(true);\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            loop: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('named loops replaced var', function(done){\n        this.base.loop('loop', function(){\n            this\n                .uint8('value')\n                .tap(function(){\n                    this.vars = this.vars.value;\n                });\n        });\n\n        this.eqArray([0, 1, 2, 3, 4], done, {\n            loop: [0, 1, 2, 3, 4]\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-loop-named.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "test/base-loop-named.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53",
    "access": null,
    "description": "CorrodeBase#loop - named",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#loop"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it54",
    "access": null,
    "description": "named loop",
    "lineNumber": 12
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it55",
    "access": null,
    "description": "named loop (scope)",
    "lineNumber": 28
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it56",
    "access": null,
    "description": "named loop (no discard, finish after)",
    "lineNumber": 55
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it57",
    "access": null,
    "description": "named loop (no discard, finish before)",
    "lineNumber": 74
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it58",
    "access": null,
    "description": "named loop (discard before, no finish)",
    "lineNumber": 93
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it59",
    "access": null,
    "description": "named loop (discard after, no finish)",
    "lineNumber": 114
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it60",
    "access": null,
    "description": "named loop (discard, finish before)",
    "lineNumber": 141
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it61",
    "access": null,
    "description": "named loop (discard, finish after)",
    "lineNumber": 160
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/base-loop-named.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-loop-named.test.js~describe53.it62",
    "access": null,
    "description": "named loops replaced var",
    "lineNumber": 179
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "test/base-primitves.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase} */\ndescribe('CorrodeBase - Primitives', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqFile = require('./helpers/asserts').eqFile.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    /**\n     * @test {CorrodeBase#int8}\n     * @test {CorrodeBase#int8le}\n     * @test {CorrodeBase#int8be}\n     * @test {CorrodeBase#uint8}\n     * @test {CorrodeBase#uint8le}\n     * @test {CorrodeBase#uint8be}\n     */\n    it('reads int8', function(done){\n        this.base\n            .int8('int8')\n            .int8le('int8le')\n            .int8be('int8be')\n            .uint8('uint8')\n            .uint8le('uint8le')\n            .uint8be('uint8be')\n            .int8('int8n')\n            .int8le('int8len')\n            .int8be('int8ben');\n\n        this.eqFile('int8-seq.bin', done, {\n            int8: 2,\n            int8le: 4,\n            int8be: 6,\n            uint8: 8,\n            uint8le: 10,\n            uint8be: 12,\n            int8n: -14,\n            int8len: -16,\n            int8ben: -18\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#int16}\n     * @test {CorrodeBase#int16le}\n     * @test {CorrodeBase#int16be}\n     * @test {CorrodeBase#uint16}\n     * @test {CorrodeBase#uint16le}\n     * @test {CorrodeBase#uint16be}\n     */\n    it('reads int16', function(done){\n        this.base\n            .int16('int16')\n            .int16le('int16le')\n            .int16be('int16be')\n            .uint16('uint16')\n            .uint16le('uint16le')\n            .uint16be('uint16be')\n            .int16('int16n')\n            .int16le('int16len')\n            .int16be('int16ben');\n\n        this.eqFile('int16-seq.bin', done, {\n            int16: 2000,\n            int16le: 4000,\n            int16be: 6000,\n            uint16: 34000,\n            uint16le: 36000,\n            uint16be: 38000,\n            int16n: -30000,\n            int16len: -31000,\n            int16ben: -32000\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#int32}\n     * @test {CorrodeBase#int32le}\n     * @test {CorrodeBase#int32be}\n     * @test {CorrodeBase#uint32}\n     * @test {CorrodeBase#uint32le}\n     * @test {CorrodeBase#uint32be}\n     */\n    it('reads int32', function(done){\n        this.base\n            .int32('int32')\n            .int32le('int32le')\n            .int32be('int32be')\n            .uint32('uint32')\n            .uint32le('uint32le')\n            .uint32be('uint32be')\n            .int32('int32n')\n            .int32le('int32len')\n            .int32be('int32ben');\n\n        this.eqFile('int32-seq.bin', done, {\n            int32: 100000,\n            int32le: 110000,\n            int32be: 120000,\n            uint32: 3000000000,\n            uint32le: 3100000000,\n            uint32be: 3200000000,\n            int32n: -1000000000,\n            int32len: -1100000000,\n            int32ben: -1200000000\n        });\n    });\n\n    /**\n     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-8.5\n     * @test {CorrodeBase#int64}\n     * @test {CorrodeBase#int64le}\n     * @test {CorrodeBase#int64be}\n     * @test {CorrodeBase#uint64}\n     * @test {CorrodeBase#uint64le}\n     * @test {CorrodeBase#uint64be}\n     */\n    it('reads int64', function(done){\n        this.base\n            .int64('int64')\n            .int64le('int64le')\n            .int64be('int64be')\n            .uint64('uint64')\n            .uint64le('uint64le')\n            .uint64be('uint64be')\n            .int64('int64n')\n            .int64le('int64len')\n            .int64be('int64ben');\n\n        this.eqFile('int64-seq.bin', done, {\n            int64: 100000,\n            int64le: 110000,\n            int64be: 120000,\n            uint64: 3000000000,\n            uint64le: 3100000000,\n            uint64be: 3200000000,\n            int64n: -1000000000,\n            int64len: -1100000000,\n            int64ben: -1200000000\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#float}\n     * @test {CorrodeBase#floatle}\n     * @test {CorrodeBase#floatbe}\n     */\n    it('reads float', function(done){\n        this.base\n            .float('float')\n            .floatle('floatle')\n            .floatbe('floatbe')\n            .floatle('floatlen')\n            .floatbe('floatben');\n\n        // floats are pretty unprecise\n        this.eqFile('float-seq.bin', done, vars => {\n            expect(vars.float).to.be.within(1.233, 1.235);\n            expect(vars.floatle).to.be.within(5.677, 5.679);\n            expect(vars.floatbe).to.be.within(9.1010, 9.1012);\n            expect(vars.floatlen).to.be.within(-12.1315, -12.1313);\n            expect(vars.floatben).to.be.within(-15.1618, -15.1616);\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#double}\n     * @test {CorrodeBase#doublele}\n     * @test {CorrodeBase#doublebe}\n     */\n    it('reads double', function(done){\n        this.base\n            .double('double')\n            .doublele('doublele')\n            .doublebe('doublebe')\n            .doublele('doublelen')\n            .doublebe('doubleben');\n\n        this.eqFile('double-seq.bin', done, {\n            double: 1.234,\n            doublele: 5.678,\n            doublebe: 9.1011,\n            doublelen: -12.1314,\n            doubleben: -15.1617\n        });\n    });\n\n    /** @test {Corrode#string} */\n    it('reads utf8-strings', function(done){\n        this.base.string('string', 16, 'utf8');\n\n        this.eqFile('string-utf8.bin', done, {\n            string: 'asdfghjklyxc𝌆'\n        });\n    });\n\n    /** @test {Corrode#string} */\n    it('reads strings, regardless of the underlying buffer', function(done){\n        this.base\n            .string('hi', 4)\n            .string('lo', 4);\n\n        this.eqMultiArray([[0x61], [0x62], [0x63, 0x64, 0x65], [0x66, 0x67], [0x68, 9, 10]], done, {\n            hi: 'abcd',\n            lo: 'efgh'\n        });\n    });\n\n    /** @test {Corrode#buffer} */\n    it('reads buffers', function(done){\n        this.base\n            .buffer('hi', 4)\n            .buffer('lo', 4);\n\n        this.eqFile('int64-seq.bin', done, {\n            hi: Buffer.from([160, 134, 1, 0]),\n            lo: Buffer.from([0, 0, 0, 0])\n        });\n    });\n\n    /** @test {Corrode#buffer} */\n    it('reads buffers, regardless of the underlying buffer', function(done){\n        this.base\n            .buffer('hi', 4)\n            .buffer('lo', 4);\n\n        this.eqMultiArray([[1], [2], [3, 4, 5], [6, 7], [8, 9, 10]], done, {\n            hi: Buffer.from([1, 2, 3, 4]),\n            lo: Buffer.from([5, 6, 7, 8])\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-primitves.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/base-primitves.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63",
    "access": null,
    "description": "CorrodeBase - Primitives",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it64",
    "access": null,
    "description": "reads int8",
    "lineNumber": 20,
    "testTargets": [
      "CorrodeBase#int8",
      "CorrodeBase#int8le",
      "CorrodeBase#int8be",
      "CorrodeBase#uint8",
      "CorrodeBase#uint8le",
      "CorrodeBase#uint8be"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it65",
    "access": null,
    "description": "reads int16",
    "lineNumber": 53,
    "testTargets": [
      "CorrodeBase#int16",
      "CorrodeBase#int16le",
      "CorrodeBase#int16be",
      "CorrodeBase#uint16",
      "CorrodeBase#uint16le",
      "CorrodeBase#uint16be"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it66",
    "access": null,
    "description": "reads int32",
    "lineNumber": 86,
    "testTargets": [
      "CorrodeBase#int32",
      "CorrodeBase#int32le",
      "CorrodeBase#int32be",
      "CorrodeBase#uint32",
      "CorrodeBase#uint32le",
      "CorrodeBase#uint32be"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it67",
    "access": null,
    "description": "reads int64",
    "see": [
      "http://www.ecma-international.org/ecma-262/5.1/#sec-8.5"
    ],
    "lineNumber": 120,
    "testTargets": [
      "CorrodeBase#int64",
      "CorrodeBase#int64le",
      "CorrodeBase#int64be",
      "CorrodeBase#uint64",
      "CorrodeBase#uint64le",
      "CorrodeBase#uint64be"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it68",
    "access": null,
    "description": "reads float",
    "lineNumber": 150,
    "testTargets": [
      "CorrodeBase#float",
      "CorrodeBase#floatle",
      "CorrodeBase#floatbe"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it69",
    "access": null,
    "description": "reads double",
    "lineNumber": 173,
    "testTargets": [
      "CorrodeBase#double",
      "CorrodeBase#doublele",
      "CorrodeBase#doublebe"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it70",
    "access": null,
    "description": "reads utf8-strings",
    "lineNumber": 191,
    "testTargets": [
      "Corrode#string"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it71",
    "access": null,
    "description": "reads strings, regardless of the underlying buffer",
    "lineNumber": 200,
    "testTargets": [
      "Corrode#string"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it72",
    "access": null,
    "description": "reads buffers",
    "lineNumber": 212,
    "testTargets": [
      "Corrode#buffer"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/base-primitves.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-primitves.test.js~describe63.it73",
    "access": null,
    "description": "reads buffers, regardless of the underlying buffer",
    "lineNumber": 224,
    "testTargets": [
      "Corrode#buffer"
    ]
  },
  {
    "__docId__": 268,
    "kind": "testFile",
    "name": "test/base-push-jobs.test.js",
    "content": "const expect = require('chai').expect;\nconst Base = require('../src/base');\nconst fixture = require('./fixtures/vars');\nconst { LITTLE_ENDIAN, BIG_ENDIAN } = Base;\n\n/** @test {CorrodeBase#jobs} */\ndescribe('CorrodeBase#jobs', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    /**\n     * @test {CorrodeBase#int8}\n     * @test {CorrodeBase#int8le}\n     * @test {CorrodeBase#int8be}\n     * @test {CorrodeBase#uint8}\n     * @test {CorrodeBase#uint8le}\n     * @test {CorrodeBase#uint8be}\n     */\n    it('pushes int8 jobs', function(){\n        this.base\n            .int8('int8')\n            .int8le('int8le')\n            .int8be('int8be')\n            .uint8('uint8')\n            .uint8le('uint8le')\n            .uint8be('uint8be');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'int8', type: 'int8', endianness: LITTLE_ENDIAN, length: 1 },\n            { name: 'int8le', type: 'int8', endianness: LITTLE_ENDIAN, length: 1 },\n            { name: 'int8be', type: 'int8', endianness: BIG_ENDIAN, length: 1 },\n            { name: 'uint8', type: 'uint8', endianness: LITTLE_ENDIAN, length: 1 },\n            { name: 'uint8le', type: 'uint8', endianness: LITTLE_ENDIAN, length: 1 },\n            { name: 'uint8be', type: 'uint8', endianness: BIG_ENDIAN, length: 1 },\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#int16}\n     * @test {CorrodeBase#int16le}\n     * @test {CorrodeBase#int16be}\n     * @test {CorrodeBase#uint16}\n     * @test {CorrodeBase#uint16le}\n     * @test {CorrodeBase#uint16be}\n     */\n    it('pushes int16 jobs', function(){\n        this.base\n            .int16('int16')\n            .int16le('int16le')\n            .int16be('int16be')\n            .uint16('uint16')\n            .uint16le('uint16le')\n            .uint16be('uint16be');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'int16', type: 'int16', endianness: LITTLE_ENDIAN, length: 2 },\n            { name: 'int16le', type: 'int16', endianness: LITTLE_ENDIAN, length: 2 },\n            { name: 'int16be', type: 'int16', endianness: BIG_ENDIAN, length: 2 },\n            { name: 'uint16', type: 'uint16', endianness: LITTLE_ENDIAN, length: 2 },\n            { name: 'uint16le', type: 'uint16', endianness: LITTLE_ENDIAN, length: 2 },\n            { name: 'uint16be', type: 'uint16', endianness: BIG_ENDIAN, length: 2 },\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#int32}\n     * @test {CorrodeBase#int32le}\n     * @test {CorrodeBase#int32be}\n     * @test {CorrodeBase#uint32}\n     * @test {CorrodeBase#uint32le}\n     * @test {CorrodeBase#uint32be}\n     */\n    it('pushes int32 jobs', function(){\n        this.base\n            .int32('int32')\n            .int32le('int32le')\n            .int32be('int32be')\n            .uint32('uint32')\n            .uint32le('uint32le')\n            .uint32be('uint32be');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'int32', type: 'int32', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'int32le', type: 'int32', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'int32be', type: 'int32', endianness: BIG_ENDIAN, length: 4 },\n            { name: 'uint32', type: 'uint32', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'uint32le', type: 'uint32', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'uint32be', type: 'uint32', endianness: BIG_ENDIAN, length: 4 },\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#int64}\n     * @test {CorrodeBase#int64le}\n     * @test {CorrodeBase#int64be}\n     * @test {CorrodeBase#uint64}\n     * @test {CorrodeBase#uint64le}\n     * @test {CorrodeBase#uint64be}\n     */\n    it('pushes int64 jobs', function(){\n        this.base\n            .int64('int64')\n            .int64le('int64le')\n            .int64be('int64be')\n            .uint64('uint64')\n            .uint64le('uint64le')\n            .uint64be('uint64be');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'int64', type: 'int64', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'int64le', type: 'int64', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'int64be', type: 'int64', endianness: BIG_ENDIAN, length: 8 },\n            { name: 'uint64', type: 'uint64', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'uint64le', type: 'uint64', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'uint64be', type: 'uint64', endianness: BIG_ENDIAN, length: 8 },\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#float}\n     * @test {CorrodeBase#floatle}\n     * @test {CorrodeBase#floatbe}\n     */\n    it('pushes float jobs', function(){\n        this.base\n            .float('float')\n            .floatle('floatle')\n            .floatbe('floatbe');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'float', type: 'float', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'floatle', type: 'float', endianness: LITTLE_ENDIAN, length: 4 },\n            { name: 'floatbe', type: 'float', endianness: BIG_ENDIAN, length: 4 }\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#double}\n     * @test {CorrodeBase#doublele}\n     * @test {CorrodeBase#doublebe}\n     */\n    it('pushes double jobs', function(){\n        this.base\n            .double('double')\n            .doublele('doublele')\n            .doublebe('doublebe');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'double', type: 'double', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'doublele', type: 'double', endianness: LITTLE_ENDIAN, length: 8 },\n            { name: 'doublebe', type: 'double', endianness: BIG_ENDIAN, length: 8 }\n        ]);\n    });\n\n    /**\n     * @test {CorrodeBase#int8}\n     * @test {CorrodeBase#uint8}\n     * @test {CorrodeBase#int16}\n     * @test {CorrodeBase#uint16}\n     * @test {CorrodeBase#int32}\n     * @test {CorrodeBase#uint32}\n     * @test {CorrodeBase#int64}\n     * @test {CorrodeBase#uint64}\n     * @test {CorrodeBase#float}\n     * @test {CorrodeBase#double}\n     * @test {CorrodeBase#options.endianness}\n     */\n    it('pushes options.endianness correct jobs', function(){\n        let base = new Base({ endianness: BIG_ENDIAN });\n\n        base\n            .int8('int8')\n            .uint8('uint8')\n            .int16('int16')\n            .uint16('uint16')\n            .int32('int32')\n            .uint32('uint32')\n            .int64('int64')\n            .uint64('uint64')\n            .float('float')\n            .double('double');\n\n        expect(base.jobs).to.deep.equal([\n            { name: 'int8', type: 'int8', endianness: BIG_ENDIAN, length: 1 },\n            { name: 'uint8', type: 'uint8', endianness: BIG_ENDIAN, length: 1 },\n            { name: 'int16', type: 'int16', endianness: BIG_ENDIAN, length: 2 },\n            { name: 'uint16', type: 'uint16', endianness: BIG_ENDIAN, length: 2 },\n            { name: 'int32', type: 'int32', endianness: BIG_ENDIAN, length: 4 },\n            { name: 'uint32', type: 'uint32', endianness: BIG_ENDIAN, length: 4 },\n            { name: 'int64', type: 'int64', endianness: BIG_ENDIAN, length: 8 },\n            { name: 'uint64', type: 'uint64', endianness: BIG_ENDIAN, length: 8 },\n            { name: 'float', type: 'float', endianness: BIG_ENDIAN, length: 4 },\n            { name: 'double', type: 'double', endianness: BIG_ENDIAN, length: 8 },\n        ]);\n    });\n\n    /** @test {Corrode#buffer} */\n    it('pushes buffer jobs', function(){\n        this.base\n            .buffer('buffer1', 1)\n            .buffer('buffer8', 8)\n            .buffer('buffer16', 16)\n            .buffer('buffer32', 32);\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'buffer1', type: 'buffer', length: 1 },\n            { name: 'buffer8', type: 'buffer', length: 8 },\n            { name: 'buffer16', type: 'buffer', length: 16 },\n            { name: 'buffer32', type: 'buffer', length: 32 }\n        ]);\n    });\n\n    /** @test {Corrode#string} */\n    it('pushes string jobs', function(){\n        this.base\n            .string('string8default', 8)\n            .string('string16ascii', 16, 'ascii')\n            .string('string32utf8', 32, 'utf8')\n            .string('string64ansi', 64, 'ansi');\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'string8default', type: 'string', length: 8, encoding: this.base.options.encoding },\n            { name: 'string16ascii', type: 'string', length: 16, encoding: 'ascii' },\n            { name: 'string32utf8', type: 'string', length: 32, encoding: 'utf8' },\n            { name: 'string64ansi', type: 'string', length: 64, encoding: 'ansi' }\n        ]);\n    });\n\n    /** @test {Corrode#push} */\n    it('pushes push jobs', function(){\n        this.base\n            .push('object', fixture.object)\n            .push('array', fixture.array);\n\n        expect(this.base.jobs).to.deep.equal([\n            { name: 'object', type: 'push', value: fixture.object },\n            { name: 'array', type: 'push', value: fixture.array }\n        ]);\n    });\n\n    /** @test {Corrode#pop} */\n    it('pushes pop jobs', function(){\n        this.base.pop();\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'pop' }\n        ]);\n    });\n\n    /** @test {Corrode#skip} */\n    it('pushes skip jobs', function(){\n        this.base\n            .skip(16)\n            .skip(32);\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'skip', length: 16 },\n            { type: 'skip', length: 32 }\n        ]);\n    });\n\n    /** @test {Corrode#loop} */\n    it('pushes loop jobs', function(){\n        let noop = function(){};\n\n        this.base\n            .loop(noop)\n            .loop('name', noop)\n            .loop('name2', noop);\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'loop', name: undefined, callback: noop, finished: false, discarded: false, iteration: 0, finish: this.base.jobs[0].finish, discard: this.base.jobs[0].discard },\n            { type: 'loop', name: 'name', callback: noop, finished: false, discarded: false, iteration: 0, finish: this.base.jobs[1].finish, discard: this.base.jobs[1].discard },\n            { type: 'loop', name: 'name2', callback: noop, finished: false, discarded: false, iteration: 0, finish: this.base.jobs[2].finish, discard: this.base.jobs[2].discard },\n        ]);\n\n        this.base.jobs[0].finish();\n        this.base.jobs[1].finish(true);\n        this.base.jobs[2].discard();\n\n        expect(this.base.jobs[0].finished).to.be.true;\n        expect(this.base.jobs[0].discarded).to.be.false;\n        expect(this.base.jobs[1].finished).to.be.true;\n        expect(this.base.jobs[1].discarded).to.be.true;\n        expect(this.base.jobs[2].finished).to.be.false;\n        expect(this.base.jobs[2].discarded).to.be.true;\n    });\n\n    /** @test {Corrode#tap} */\n    it('pushes tap jobs', function(){\n        let noop = function(){};\n\n        this.base\n            .tap(noop)\n            .tap('name', noop)\n            .tap('name2', noop, ['a', 'b'])\n            .tap(noop, ['a', 'b']);\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'tap', name: undefined, args: undefined, callback: noop },\n            { type: 'tap', name: 'name', args: undefined, callback: noop },\n            { type: 'tap', name: 'name2', args: ['a', 'b'], callback: noop },\n            { type: 'tap', name: undefined, args: ['a', 'b'], callback: noop },\n        ]);\n    });\n\n    /** @test {Corrode#queueJobs} */\n    it('queues and unqueues jobs', function(){\n        this.base\n            .uint8le('uint8le')\n            .int64le('int64le');\n\n        let unqueue = this.base.queueJobs();\n\n        this.base\n            .string('string', 16)\n            .buffer('buffer', 16);\n\n        unqueue();\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'string', name: 'string', length: 16, encoding: this.base.options.encoding },\n            { type: 'buffer', name: 'buffer', length: 16 },\n            { name: 'uint8le', type: 'uint8', endianness: LITTLE_ENDIAN, length: 1 },\n            { name: 'int64le', type: 'int64', endianness: LITTLE_ENDIAN, length: 8 }\n        ]);\n    });\n\n    /** @test {Corrode#removeReadJobs} */\n    it('removes read jobs', function(){\n        let noop = function(){};\n\n        this.base\n            .uint8le('uint8le')\n            .string('string', 16)\n            .buffer('buffer', 32)\n            .int64le('int64le')\n            .tap('tap', noop)\n            .tap(noop)\n            .loop('loop', noop)\n            .loop(noop)\n            .pop()\n            .string('string128', 128);\n\n        this.base.removeReadJobs();\n\n        expect(this.base.jobs).to.deep.equal([\n            { type: 'tap', name: undefined, args: undefined, callback: noop },\n            { type: 'pop' }\n        ]);\n    });\n\n    /** @test {Corrode#jobLoop} */\n    it('throws error on unknown job', function(){\n        this.base.jobs.push({ type: 'invalid-job-type', length: 1 });\n        expect(this.eqArray.bind(this, () => {}, [1, 2, 3], { foo: 'bar' })).to.throw(Error);\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-push-jobs.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/base-push-jobs.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74",
    "access": null,
    "description": "CorrodeBase#jobs",
    "lineNumber": 7,
    "testTargets": [
      "CorrodeBase#jobs"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it75",
    "access": null,
    "description": "pushes int8 jobs",
    "lineNumber": 21,
    "testTargets": [
      "CorrodeBase#int8",
      "CorrodeBase#int8le",
      "CorrodeBase#int8be",
      "CorrodeBase#uint8",
      "CorrodeBase#uint8le",
      "CorrodeBase#uint8be"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it76",
    "access": null,
    "description": "pushes int16 jobs",
    "lineNumber": 48,
    "testTargets": [
      "CorrodeBase#int16",
      "CorrodeBase#int16le",
      "CorrodeBase#int16be",
      "CorrodeBase#uint16",
      "CorrodeBase#uint16le",
      "CorrodeBase#uint16be"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it77",
    "access": null,
    "description": "pushes int32 jobs",
    "lineNumber": 75,
    "testTargets": [
      "CorrodeBase#int32",
      "CorrodeBase#int32le",
      "CorrodeBase#int32be",
      "CorrodeBase#uint32",
      "CorrodeBase#uint32le",
      "CorrodeBase#uint32be"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it78",
    "access": null,
    "description": "pushes int64 jobs",
    "lineNumber": 102,
    "testTargets": [
      "CorrodeBase#int64",
      "CorrodeBase#int64le",
      "CorrodeBase#int64be",
      "CorrodeBase#uint64",
      "CorrodeBase#uint64le",
      "CorrodeBase#uint64be"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it79",
    "access": null,
    "description": "pushes float jobs",
    "lineNumber": 126,
    "testTargets": [
      "CorrodeBase#float",
      "CorrodeBase#floatle",
      "CorrodeBase#floatbe"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it80",
    "access": null,
    "description": "pushes double jobs",
    "lineNumber": 144,
    "testTargets": [
      "CorrodeBase#double",
      "CorrodeBase#doublele",
      "CorrodeBase#doublebe"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it81",
    "access": null,
    "description": "pushes options.endianness correct jobs",
    "lineNumber": 170,
    "testTargets": [
      "CorrodeBase#int8",
      "CorrodeBase#uint8",
      "CorrodeBase#int16",
      "CorrodeBase#uint16",
      "CorrodeBase#int32",
      "CorrodeBase#uint32",
      "CorrodeBase#int64",
      "CorrodeBase#uint64",
      "CorrodeBase#float",
      "CorrodeBase#double",
      "CorrodeBase#options.endianness"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it82",
    "access": null,
    "description": "pushes buffer jobs",
    "lineNumber": 200,
    "testTargets": [
      "Corrode#buffer"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it83",
    "access": null,
    "description": "pushes string jobs",
    "lineNumber": 216,
    "testTargets": [
      "Corrode#string"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it84",
    "access": null,
    "description": "pushes push jobs",
    "lineNumber": 232,
    "testTargets": [
      "Corrode#push"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it85",
    "access": null,
    "description": "pushes pop jobs",
    "lineNumber": 244,
    "testTargets": [
      "Corrode#pop"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it86",
    "access": null,
    "description": "pushes skip jobs",
    "lineNumber": 253,
    "testTargets": [
      "Corrode#skip"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it87",
    "access": null,
    "description": "pushes loop jobs",
    "lineNumber": 265,
    "testTargets": [
      "Corrode#loop"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it88",
    "access": null,
    "description": "pushes tap jobs",
    "lineNumber": 292,
    "testTargets": [
      "Corrode#tap"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it89",
    "access": null,
    "description": "queues and unqueues jobs",
    "lineNumber": 310,
    "testTargets": [
      "Corrode#queueJobs"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it90",
    "access": null,
    "description": "removes read jobs",
    "lineNumber": 332,
    "testTargets": [
      "Corrode#removeReadJobs"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/base-push-jobs.test.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-push-jobs.test.js~describe74.it91",
    "access": null,
    "description": "throws error on unknown job",
    "lineNumber": 356,
    "testTargets": [
      "Corrode#jobLoop"
    ]
  },
  {
    "__docId__": 287,
    "kind": "testFile",
    "name": "test/base-skip.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#skip} */\ndescribe('CorrodeBase#skip', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    it('allows us to skip content', function(done){\n        this.base\n            .uint8('var_1')\n            .skip(2)\n            .uint8('var_2')\n            .skip(4)\n            .uint8('var_3');\n\n        this.eqArray([1, 0, 0, 2, 0, 0, 0, 0, 3], done, {\n            var_1: 1,\n            var_2: 2,\n            var_3: 3\n        });\n    });\n\n    /** @test {CorrodeBase#isSeeking} */\n    it('prevents us from unskipping content with isSeeking = false', function(done){\n        this.base\n            .uint8('var_1')\n            .skip(2)\n            .uint8('var_2')\n            .skip(-3)\n            .uint8('var_3');\n\n        expect(this.eqMultiArray.bind(this, [[1], [3], [0], [2]], done, {})).to.throw(RangeError);\n\n        done();\n    });\n\n    /** @test {CorrodeBase#isSeeking} */\n    it('allows us to unskip content with isSeeking = true', function(done){\n        this.base.isSeeking = true;\n\n        this.base\n            .uint8('var_1')\n            .skip(2)\n            .uint8('var_2')\n            .skip(-3)\n            .uint8('var_3');\n\n        this.eqArray([1, 3, 0, 2], done, {\n            var_1: 1,\n            var_2: 2,\n            var_3: 3\n        });\n    });\n\n    it('prevents us from unskipping too far', function(){\n        this.base\n            .uint8('var_1')\n            .skip(-10);\n\n        expect(this.eqArray.bind(this, [1, 2], () => {}, {})).to.throw(RangeError);\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-skip.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/base-skip.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-skip.test.js~describe92",
    "access": null,
    "description": "CorrodeBase#skip",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#skip"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/base-skip.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-skip.test.js~describe92.it93",
    "access": null,
    "description": "allows us to skip content",
    "lineNumber": 12
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/base-skip.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-skip.test.js~describe92.it94",
    "access": null,
    "description": "prevents us from unskipping content with isSeeking = false",
    "lineNumber": 28,
    "testTargets": [
      "CorrodeBase#isSeeking"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/base-skip.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-skip.test.js~describe92.it95",
    "access": null,
    "description": "allows us to unskip content with isSeeking = true",
    "lineNumber": 42,
    "testTargets": [
      "CorrodeBase#isSeeking"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/base-skip.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-skip.test.js~describe92.it96",
    "access": null,
    "description": "prevents us from unskipping too far",
    "lineNumber": 59
  },
  {
    "__docId__": 293,
    "kind": "testFile",
    "name": "test/base-stack.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#varStack} */\ndescribe('CorrodeBase#varStack', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    /** @test {CorrodeBase#push} */\n    it('pushes and pops', function(done){\n        this.base\n            .uint8('val_0')\n            .push('child')\n            .uint8('val_1')\n            .push('child')\n            .uint8('val_2')\n            .pop()\n            .uint8('val_3')\n            .pop()\n            .uint8('val_4');\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            val_0: 0,\n            val_4: 4,\n            child: {\n                val_1: 1,\n                val_3: 3,\n                child: {\n                    val_2: 2,\n                }\n            }\n        })\n    });\n\n    /** @test {CorrodeBase#pop} */\n    it('denies popping the root-layer', function(){\n        this.base.pop();\n        expect(this.eqArray.bind(this, [], () => {}, {})).to.throw(ReferenceError);\n    });\n\n    /**\n     * @test {CorrodeBase#push}\n     * @test {CorrodeBase#pop}\n     */\n    it('pushes back into old layers', function(done){\n        this.base\n            .uint8('val_0')\n            .push('child')\n            .uint8('val_1')\n            .pop()\n            .uint8('val_2')\n            .push('child')\n            .uint8('val_3')\n            .pop()\n            .uint8('val_4');\n\n        this.eqArray([0, 1, 2, 3, 4], done, {\n            val_0: 0,\n            val_2: 2,\n            val_4: 4,\n            child: {\n                val_1: 1,\n                val_3: 3\n            }\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#push}\n     * @test {CorrodeBase#finishRemainingJobs}\n     */\n    it('automatically unpushes as it unwinds', function(done){\n        this.base\n            .uint8('var_0')\n            .push('child')\n            .uint8('var_1');\n\n        this.eqArray([0, 1, 2], done, {\n            var_0: 0,\n            child: {\n                var_1: 1\n            }\n        });\n    });\n\n    /**\n     * @test {CorrodeBase#options.strictObjectMode}\n     */\n    it('denies pushing into non-object vars', function(){\n        this.base\n            .uint8('var_0')\n            .push('var_0')\n            .uint8('var_1');\n\n        expect(this.eqArray.bind(this, [0, 1, 2], () => {}, {})).to.throw(TypeError);\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-stack.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/base-stack.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-stack.test.js~describe97",
    "access": null,
    "description": "CorrodeBase#varStack",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#varStack"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/base-stack.test.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-stack.test.js~describe97.it98",
    "access": null,
    "description": "pushes and pops",
    "lineNumber": 12,
    "testTargets": [
      "CorrodeBase#push"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/base-stack.test.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-stack.test.js~describe97.it99",
    "access": null,
    "description": "denies popping the root-layer",
    "lineNumber": 38,
    "testTargets": [
      "CorrodeBase#pop"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/base-stack.test.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-stack.test.js~describe97.it100",
    "access": null,
    "description": "pushes back into old layers",
    "lineNumber": 47,
    "testTargets": [
      "CorrodeBase#push",
      "CorrodeBase#pop"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/base-stack.test.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-stack.test.js~describe97.it101",
    "access": null,
    "description": "automatically unpushes as it unwinds",
    "lineNumber": 74,
    "testTargets": [
      "CorrodeBase#push",
      "CorrodeBase#finishRemainingJobs"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/base-stack.test.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-stack.test.js~describe97.it102",
    "access": null,
    "description": "denies pushing into non-object vars",
    "lineNumber": 91,
    "testTargets": [
      "CorrodeBase#options.strictObjectMode"
    ]
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "name": "test/base-tap.test.js",
    "content": "const { expect } = require('chai');\nconst Base = require('../src/base');\n\n/** @test {CorrodeBase#tap} */\ndescribe('CorrodeBase#tap', () => {\n    beforeEach(function(){\n        this.base = new Base();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    it('taps into the current state', function(done){\n        this.base\n            .uint8('var_1')\n            .tap(function(){\n                expect(this.vars.var_1).to.equal(1);\n            });\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1\n        });\n    });\n\n    it('taps into a named var', function(done){\n        this.base\n            .uint8('var_1')\n            .tap('struct', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3');\n            });\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1,\n            struct: {\n                var_2: 2,\n                var_3: 3\n            }\n        });\n    });\n\n    it('re-taps into existing objects', function(done){\n        this.base\n            .uint8('var_1')\n            .tap('structure', function(){\n                this\n                    .uint8('var_2')\n                    .uint8('var_3')\n            })\n            .uint8('var_4')\n            .tap('structure', function(){\n                this\n                    .uint8('var_5')\n                    .uint8('var_6');\n            });\n\n        this.eqArray([1, 2, 3, 4, 5, 6], done, {\n            var_1: 1,\n            var_4: 4,\n            structure: {\n                var_2: 2,\n                var_3: 3,\n                var_5: 5,\n                var_6: 6\n            }\n        });\n    });\n\n    it('supports custom arguments in anonymous taps', function(done){\n        this.base\n            .uint8('var_1')\n            .tap(function(subvar_1, subvar_2, subvar_3){\n                expect(subvar_1).to.be.true;\n                expect(subvar_2).to.be.false;\n                expect(subvar_3).to.be.undefined;\n                this.uint8('var_3');\n            }, [true, false]);\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1,\n            var_3: 2\n        });\n    });\n\n    it('supports custom arguments in named taps', function(done){\n        this.base\n            .uint8('var_1')\n            .tap('structure', function(subvar_1, subvar_2, subvar_3){\n                expect(subvar_1).to.be.true;\n                expect(subvar_2).to.be.false;\n                expect(subvar_3).to.be.undefined;\n                this.uint8('var_3');\n            }, [true, false]);\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1,\n            structure: {\n                var_3: 2\n            }\n        });\n    });\n\n    /** @test {CorrodeBase#options.strictObjectMode} */\n    it('does not allow tapping into other objects', function(){\n        this.base\n            .uint8('var_1')\n            .tap('var_1', function(){\n                this.uint8('var_2');\n            })\n            .uint8('var_3');\n\n        expect(this.eqArray.bind(this, [1, 2, 3], () => {}, {})).to.throw(TypeError);\n    });\n\n    /** @test {CorrodeBase#options.strictObjectMode} */\n    it('allows tapping into other objects when strictObjectMode is false', function(done){\n        this.base = new Base({ strictObjectMode: false });\n\n        this.base\n            .uint8('var_1')\n            .tap('var_1', function(){\n                expect(this.vars).to.be.a.number;\n            });\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/base-tap.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/base-tap.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/base-tap.test.js~describe103",
    "access": null,
    "description": "CorrodeBase#tap",
    "lineNumber": 5,
    "testTargets": [
      "CorrodeBase#tap"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it104",
    "access": null,
    "description": "taps into the current state",
    "lineNumber": 11
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it105",
    "access": null,
    "description": "taps into a named var",
    "lineNumber": 23
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it106",
    "access": null,
    "description": "re-taps into existing objects",
    "lineNumber": 41
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it107",
    "access": null,
    "description": "supports custom arguments in anonymous taps",
    "lineNumber": 68
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it108",
    "access": null,
    "description": "supports custom arguments in named taps",
    "lineNumber": 84
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it109",
    "access": null,
    "description": "does not allow tapping into other objects",
    "lineNumber": 103,
    "testTargets": [
      "CorrodeBase#options.strictObjectMode"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/base-tap.test.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/base-tap.test.js~describe103.it110",
    "access": null,
    "description": "allows tapping into other objects when strictObjectMode is false",
    "lineNumber": 115,
    "testTargets": [
      "CorrodeBase#options.strictObjectMode"
    ]
  },
  {
    "__docId__": 309,
    "kind": "testFile",
    "name": "test/corrode-extensions.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/**\n * @test {Corrode#addExtension}\n * @test {Corrode#ext}\n */\ndescribe('Corrode#ext', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n\n    Corrode.addExtension('simpleRepeat', function(arg1, arg2){\n        this\n            .loop('values', function(end, discard, i){\n                if(i >= 3){\n                    return end();\n                }\n\n                this\n                    .uint8(arg1)\n                    .uint8(arg2);\n            })\n            .map.push();\n    });\n\n\n    it('supports extensions', function(done){\n        this.base.ext.simpleRepeat('extObj', 'val_1', 'val_2');\n\n        this.eqArray([1, 2, 3, 4, 5, 6], done, {\n            extObj: [{\n                val_1: 1,\n                val_2: 2\n            }, {\n                val_1: 3,\n                val_2: 4\n            }, {\n                val_1: 5,\n                val_2: 6\n            }]\n        });\n    });\n\n\n    Corrode.addExtension('simpleReturn', function(arg1, arg2){\n        return this.varStack.peek()[arg1] + this.varStack.peek()[arg2];\n    });\n\n    it('supports extensions with return values and scope-access', function(done){\n        this.base\n            .uint8('val_1')\n            .uint8('val_2')\n            .ext.simpleReturn('extReturn', 'val_1', 'val_2');\n\n        this.eqArray([2, 3, 4, 5, 6], done, {\n            val_1: 2,\n            val_2: 3,\n            extReturn: 5\n        });\n    });\n\n\n    Corrode.addExtension('mixReturnReadNonObject', function(){\n        this.uint8('fix');\n        return 4; // chosen by fair dice roll\n    });\n\n    it('supports extensions with return and read', function(){\n        this.base\n            .uint8('var_1')\n            .ext.mixReturnReadNonObject('extObj');\n\n        expect(this.eqArray.bind(this, [1, 2, 3], () => {}, {})).to.throw(TypeError);\n    });\n\n\n    Corrode.addExtension('mixReturnReadObject', function(){\n        this.uint8('fix');\n        return {\n            objVal: 'foo'\n        };\n    });\n\n    it('supports extensions with return and read', function(done){\n        this.base\n            .uint8('var_1')\n            .ext.mixReturnReadObject('extObj');\n\n        this.eqArray([1, 2, 3], done, {\n            var_1: 1,\n            extObj: {\n                fix: 2,\n                objVal: 'foo'\n            }\n        });\n    });\n\n\n    Corrode.addExtension('simpleRead', function(arg1, arg2){\n        this\n            .uint8(arg1)\n            .uint8(arg2)\n            .ext.simpleReturn('added', arg1, arg2);\n    });\n\n    Corrode.addExtension('callProxy', function(extName, ...args){\n        this\n            .ext[extName]('values', ...args)\n            .map.push();\n    });\n\n    it('supports calling extensions within extensions', function(done){\n        this.base\n            .uint8('var_1')\n            .ext.callProxy('proxyVal1', 'simpleRead', 'val_2', 'val_3')\n            .ext.callProxy('proxyVal2', 'simpleRead', 'val_4', 'val_5');\n\n        this.eqArray([1, 2, 3, 4, 5, 6], done, {\n            var_1: 1,\n            proxyVal1: {\n                val_2: 2,\n                val_3: 3,\n                added: 5\n            },\n            proxyVal2: {\n                val_4: 4,\n                val_5: 5,\n                added: 9\n            }\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-extensions.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "test/corrode-extensions.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111",
    "access": null,
    "description": "Corrode#ext",
    "lineNumber": 8,
    "testTargets": [
      "Corrode#addExtension",
      "Corrode#ext"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/corrode-extensions.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111.it112",
    "access": null,
    "description": "supports extensions",
    "lineNumber": 30
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/corrode-extensions.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111.it113",
    "access": null,
    "description": "supports extensions with return values and scope-access",
    "lineNumber": 52
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/corrode-extensions.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111.it114",
    "access": null,
    "description": "supports extensions with return and read",
    "lineNumber": 71
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/corrode-extensions.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111.it115",
    "access": null,
    "description": "supports extensions with return and read",
    "lineNumber": 87
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/corrode-extensions.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-extensions.test.js~describe111.it116",
    "access": null,
    "description": "supports calling extensions within extensions",
    "lineNumber": 115
  },
  {
    "__docId__": 316,
    "kind": "testFile",
    "name": "test/corrode-helper.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode} */\ndescribe('Corrode - Helpers', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    /**\n     * coverage fix\n     * @test {Corrode#debug}\n     */\n    it('debugs', function(done){\n        let output = [];\n        const orgConsoleLog = console.log;\n        console.log = (...strings) => output = strings;\n\n        this.base\n            .loop('array', function(end, discard, i){\n                this\n                    .uint8('values')\n                    .map.push();\n            })\n            .debug();\n\n        this.eqArray([3, 5, 7], function(){\n            expect(output).to.deep.equal([\n                '{ array: [ 3, 5, 7 ] }'\n            ]);\n            console.log = orgConsoleLog;\n            done();\n        }, {\n            array: [3, 5, 7],\n        });\n    });\n\n    /** @test {Corrode#fromBuffer} */\n    it('converts from buffer', function(){\n        this.base\n            .loop('array', function(end, discard, i){\n                this\n                    .uint8('values')\n                    .map.push();\n            })\n            .fromBuffer(Buffer.from([0, 1, 2, 3, 4, 5]), vars => {\n                expect(vars).to.deep.equal({\n                    array: [0, 1, 2, 3, 4, 5]\n                });\n            });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-helper.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/corrode-helper.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-helper.test.js~describe117",
    "access": null,
    "description": "Corrode - Helpers",
    "lineNumber": 5,
    "testTargets": [
      "Corrode"
    ]
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/corrode-helper.test.js~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-helper.test.js~describe117.it118",
    "access": null,
    "description": "coverage fix",
    "lineNumber": 15,
    "testTargets": [
      "Corrode#debug"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/corrode-helper.test.js~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-helper.test.js~describe117.it119",
    "access": null,
    "description": "converts from buffer",
    "lineNumber": 40,
    "testTargets": [
      "Corrode#fromBuffer"
    ]
  },
  {
    "__docId__": 320,
    "kind": "testFile",
    "name": "test/corrode-pointer.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode#pointer} */\ndescribe('Corrode#pointer', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    it('retrieves from array', function(done){\n        this.base\n            .loop('array', function(end, discard, i){\n                if(i >= 3){\n                    return end();\n                }\n                this\n                    .uint8('values')\n                    .map.push();\n            })\n            .pointer('alphabet', ['a', 'b', 'c'], 'uint8')\n            .pointer('numeric', 'array', 'uint8');\n\n        this.eqArray([3, 5, 7, 1, 2], done, {\n            array: [3, 5, 7],\n            alphabet: 'b',\n            numeric: 7\n        });\n    });\n\n    it('retrieves from object', function(done){\n        this.base\n            .tap('obj', function(){\n                this.loop(function(end, discard, i){\n                    if(i >= 3){\n                        return end();\n                    }\n                    this.uint8(i);\n                });\n            })\n            .pointer('alphabet', { 0: 'a', 1: 'b', 2: 'c' }, 'uint8')\n            .pointer('numeric', 'obj', 'uint8');\n\n        this.eqArray([3, 5, 7, 1, 2], done, {\n            obj: { 0: 3, 1: 5, 2: 7},\n            alphabet: 'b',\n            numeric: 7\n        });\n    });\n\n    // why not?\n    it('retrieves from string', function(done){\n        this.base\n            .terminatedString('string')\n            .pointer('numeric', 'string', 'uint8');\n\n        this.eqArray([0x68, 0x65, 0x6c, 0x6c, 0x6f, 0, 4], done, {\n            string: 'hello',\n            numeric: 'o'\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-pointer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "test/corrode-pointer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-pointer.test.js~describe120",
    "access": null,
    "description": "Corrode#pointer",
    "lineNumber": 5,
    "testTargets": [
      "Corrode#pointer"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/corrode-pointer.test.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-pointer.test.js~describe120.it121",
    "access": null,
    "description": "retrieves from array",
    "lineNumber": 11
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/corrode-pointer.test.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-pointer.test.js~describe120.it122",
    "access": null,
    "description": "retrieves from object",
    "lineNumber": 31
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/corrode-pointer.test.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-pointer.test.js~describe120.it123",
    "access": null,
    "description": "retrieves from string",
    "lineNumber": 52
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "name": "test/corrode-position.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode#position} */\ndescribe('Corrode#position', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    it('jumps to absolute positions', function(done){\n        this.base.isSeeking = true;\n\n        this.base\n            .uint8('var_1')\n            .position(0)\n            .uint8('var_2')\n            .position(3)\n            .uint8('var_3')\n            .position('var_3')\n            .uint8('var_4')\n\n        this.eqArray([0, 1, 2, 5, 4, 3, 7], done, {\n            var_1: 0,\n            var_2: 0,\n            var_3: 5,\n            var_4: 3\n        });\n    });\n\n    it('prevents jumps to invalid negative positions', function(){\n        this.base.isSeeking = true;\n\n        this.base.position(-1);\n\n        expect(this.eqArray.bind(this, [0], () => {}, {})).to.throw(RangeError);\n    });\n\n    it('allows jumps to future positive positions', function(done){\n        this.base.isSeeking = true;\n\n        this.base\n            .uint8('var_1')\n            .position(10)\n            .uint8('var_2');\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            var_1: 0\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-position.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "test/corrode-position.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-position.test.js~describe124",
    "access": null,
    "description": "Corrode#position",
    "lineNumber": 5,
    "testTargets": [
      "Corrode#position"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/corrode-position.test.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-position.test.js~describe124.it125",
    "access": null,
    "description": "jumps to absolute positions",
    "lineNumber": 11
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/corrode-position.test.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-position.test.js~describe124.it126",
    "access": null,
    "description": "prevents jumps to invalid negative positions",
    "lineNumber": 31
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/corrode-position.test.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-position.test.js~describe124.it127",
    "access": null,
    "description": "allows jumps to future positive positions",
    "lineNumber": 39
  },
  {
    "__docId__": 330,
    "kind": "testFile",
    "name": "test/corrode-repeat.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode#repeat} */\ndescribe('Corrode#repeat', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n    });\n\n    it('repeats anonymously', function(done){\n        this.base.repeat(5, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], done, {\n            var_0: 0,\n            var_1: 1,\n            var_2: 2,\n            var_3: 3,\n            var_4: 4\n        });\n    });\n\n    it('repeats named', function(done){\n        this.base.repeat('repeat', 5, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }, {\n                var_3: 3\n            }, {\n                var_4: 4\n            }]\n        });\n    });\n\n    it('repeats anonymously as long as possible', function(done){\n        this.base.repeat(10, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4], done, {\n            var_0: 0,\n            var_1: 1,\n            var_2: 2,\n            var_3: 3,\n            var_4: 4\n        });\n    });\n\n    it('repeats named as long as possible', function(done){\n        this.base.repeat('repeat', 10, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }, {\n                var_3: 3\n            }, {\n                var_4: 4\n            }]\n        });\n    });\n\n    it('repeats anonymously with the right scope', function(done){\n        this.base.repeat(5, function(){\n            if(typeof this.vars.iterations === 'undefined'){\n                this.vars.iterations = 0;\n            }\n            this.vars.iterations++;\n\n            this.uint8('var');\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6], done, {\n            var: 4,\n            iterations: 5\n        });\n    });\n\n    it('repeats named with the right scope', function(done){\n        this.base\n            .uint8('rootFix')\n            .repeat('repeat', 5, function(){\n                if(typeof this.vars.fix === 'undefined'){\n                    this.vars.fix = -1;\n                }\n                this.vars.fix++;\n                this.varStack.peek().rootFix++;\n                this.uint8('var');\n            });\n\n        this.eqArray([0, 0, 1, 2, 3, 4, 5, 6], done, {\n            rootFix: 5,\n            repeat: [{\n                fix: 0,\n                var: 0\n            }, {\n                fix: 0,\n                var: 1\n            }, {\n                fix: 0,\n                var: 2\n            }, {\n                fix: 0,\n                var: 3\n            }, {\n                fix: 0,\n                var: 4\n            }]\n        });\n    });\n\n    it('repeats anonymously with a string as length', function(done){\n        this.base\n            .uint8('iterations')\n            .repeat('iterations', function(end, discard, i){\n                this.uint8('var_' + i);\n            });\n\n        this.eqArray([4, 0, 1, 2, 3, 4, 5, 6], done, {\n            iterations: 4,\n            var_0: 0,\n            var_1: 1,\n            var_2: 2,\n            var_3: 3\n        });\n    });\n\n\n    it('repeats named with a string as length', function(done){\n        this.base\n            .uint8('iterations')\n            .repeat('repeat', 'iterations', function(){\n                this.uint8('var');\n            });\n\n        this.eqArray([4, 0, 1, 2, 3, 4, 5, 6], done, {\n            iterations: 4,\n            repeat: [{\n                var: 0\n            }, {\n                var: 1\n            }, {\n                var: 2\n            }, {\n                var: 3\n            }]\n        });\n    });\n\n    it('shortcuts anonymous repeats', function(done){\n        this.base.repeat(0, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2], done, {});\n    });\n\n    it('shortcuts named repeats', function(done){\n        this.base.repeat('repeat', 0, function(end, discard, i){\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2], done, { repeat: [] });\n    });\n\n    // finishing & discarding\n    it('repeats (no discard, finish after)', function(done){\n        this.base.repeat('repeat', 5, function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 2){\n                finish();\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('repeats (no discard, finish before)', function(done){\n        this.base.repeat('repeat', 5, function(finish, discard, i){\n            if(i >= 3){\n                return finish();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('repeats (discard before, no finish)', function(done){\n        this.base.repeat('repeat', 5, function(finish, discard, i){\n            if(i % 2 !== 0){\n                discard();\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5, 6], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_2: 2\n            }, {\n                var_4: 4\n            }]\n        });\n    });\n\n    it('repeat (discard after, no finish)', function(done){\n        this.base\n            .uint8('rootFix')\n            .repeat('repeat', 5, function(finish, discard, i){\n                this\n                    .uint8('var_' + i)\n                    .tap(function(){\n                        if(this.vars['var_' + i] % 2 !== 0){\n                            discard();\n                        }\n                    });\n                this.varStack.peek().rootFix++;\n                if(i % 3 === 0){\n                    discard();\n                }\n            });\n\n        this.eqArray([0, 0, 1, 2, 3, 4, 5, 6], done, {\n            rootFix: 5,\n            repeat: [{\n                var_2: 2\n            }, {\n                var_4: 4\n            }]\n        });\n    });\n\n    it('repeats (discard, finish before)', function(done){\n        this.base.repeat('repeat', 5, function(finish, discard, i){\n            if(i >= 3){\n                finish(true);\n            }\n            this.uint8('var_' + i);\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('repeats (discard, finish after)', function(done){\n        this.base.repeat('repeat', 5, function(finish, discard, i){\n            this.uint8('var_' + i);\n            if(i >= 3){\n                finish(true);\n            }\n        });\n\n        this.eqArray([0, 1, 2, 3, 4, 5], done, {\n            repeat: [{\n                var_0: 0\n            }, {\n                var_1: 1\n            }, {\n                var_2: 2\n            }]\n        });\n    });\n\n    it('repeats replaced var', function(done){\n        this.base.repeat('repeat', 5, function(){\n            this\n                .uint8('value')\n                .tap(function(){\n                    this.vars = this.vars.value;\n                });\n        });\n\n        this.eqArray([0, 1, 2, 3, 4], done, {\n            repeat: [0, 1, 2, 3, 4]\n        });\n    });\n\n    it('repeats 0 times direct', function(done){\n        this.base\n            .repeat('repeat', 0, function(){\n                this.uint8('shouldntexist')\n            })\n            .uint8('value');\n\n        this.eqArray([10, 20], done, {\n            repeat: [],\n            value: 10\n        });\n    });\n\n    it('repeats 0 times with a string as length', function(done){\n        this.base\n            .uint8('lengthValue')\n            .repeat('repeat', 'lengthValue', function(){\n                this.uint8('shouldntexist')\n            })\n            .uint8('value');\n\n        this.eqArray([0, 10, 20], done, {\n            lengthValue: 0,\n            repeat: [],\n            value: 10\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-repeat.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/corrode-repeat.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128",
    "access": null,
    "description": "Corrode#repeat",
    "lineNumber": 5,
    "testTargets": [
      "Corrode#repeat"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it129",
    "access": null,
    "description": "repeats anonymously",
    "lineNumber": 11
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it130",
    "access": null,
    "description": "repeats named",
    "lineNumber": 25
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it131",
    "access": null,
    "description": "repeats anonymously as long as possible",
    "lineNumber": 45
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it132",
    "access": null,
    "description": "repeats named as long as possible",
    "lineNumber": 59
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it133",
    "access": null,
    "description": "repeats anonymously with the right scope",
    "lineNumber": 79
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it134",
    "access": null,
    "description": "repeats named with the right scope",
    "lineNumber": 95
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it135",
    "access": null,
    "description": "repeats anonymously with a string as length",
    "lineNumber": 128
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it136",
    "access": null,
    "description": "repeats named with a string as length",
    "lineNumber": 145
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it137",
    "access": null,
    "description": "shortcuts anonymous repeats",
    "lineNumber": 166
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it138",
    "access": null,
    "description": "shortcuts named repeats",
    "lineNumber": 174
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it139",
    "access": null,
    "description": "repeats (no discard, finish after)",
    "lineNumber": 183
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it140",
    "access": null,
    "description": "repeats (no discard, finish before)",
    "lineNumber": 202
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it141",
    "access": null,
    "description": "repeats (discard before, no finish)",
    "lineNumber": 221
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it142",
    "access": null,
    "description": "repeat (discard after, no finish)",
    "lineNumber": 240
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it143",
    "access": null,
    "description": "repeats (discard, finish before)",
    "lineNumber": 267
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it144",
    "access": null,
    "description": "repeats (discard, finish after)",
    "lineNumber": 286
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it145",
    "access": null,
    "description": "repeats replaced var",
    "lineNumber": 305
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it146",
    "access": null,
    "description": "repeats 0 times direct",
    "lineNumber": 319
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/corrode-repeat.test.js~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-repeat.test.js~describe128.it147",
    "access": null,
    "description": "repeats 0 times with a string as length",
    "lineNumber": 332
  },
  {
    "__docId__": 351,
    "kind": "testFile",
    "name": "test/corrode-terminated-buffer.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode#terminatedBuffer} */\ndescribe('Corrode#terminatedBuffer', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    it('retrieves a terminated buffer', function(done){\n        this.base\n            .terminatedBuffer('buffer_1')\n            .terminatedBuffer('buffer_2');\n\n        this.eqArray([3, 5, 7, 0, 9, 1, 2, 4, 0, 6, 8], done, {\n            buffer_1: Buffer.from([3, 5, 7]),\n            buffer_2: Buffer.from([9, 1, 2, 4])\n        });\n    });\n\n    it('retrieves a terminated buffer spanned over multiple buffers', function(done){\n        this.base\n            .terminatedBuffer('buffer_1')\n            .terminatedBuffer('buffer_2');\n\n        this.eqMultiArray([[2, 4, 6], [8], [0], [1, 3], [5, 7], [0, 0]], done, {\n            buffer_1: Buffer.from([2, 4, 6, 8]),\n            buffer_2: Buffer.from([1, 3, 5, 7])\n        });\n    });\n\n    it('retrieves a terminated buffer spanned over multiple buffers with options', function(done){\n        this.base\n            .terminatedBuffer('buffer_1', 8, false)\n            .terminatedBuffer('buffer_2', 3)\n            .uint8('terminator')\n            .terminatedBuffer('buffer_3', 'terminator');\n\n        this.eqMultiArray([[2, 4, 6], [8], [0], [1, 3], [5, 7], [0, 0, 2, 5]], done, {\n            buffer_1: Buffer.from([2, 4, 6, 8]),\n            buffer_2: Buffer.from([0, 1]),\n            terminator: 5,\n            buffer_3: Buffer.from([7, 0, 0, 2])\n        });\n    });\n\n    it('retrieves a terminated buffer in a complex parser', function(done){\n        this.base\n            .uint8('terminator_1')\n            .loop('buffers', function(end, discard, i){\n                if(i >= 3){\n                    return end();\n                }\n\n                this\n                    .uint8('prefix')\n                    .terminatedBuffer('buffer', this.varStack.peek().terminator_1)\n            })\n            .terminatedBuffer('buffer_1', 'terminator_1')\n            .terminatedBuffer('buffer_2', 3);\n\n        this.eqMultiArray([[2, 7, 4, 6], [8, 2], [7, 0], [1, 2, 7, 3], [5, 7, 2], [0, 0, 2, 5, 6, 3]], done, {\n            terminator_1: 2,\n            buffers: [{\n                prefix: 7,\n                buffer: Buffer.from([4, 6, 8])\n            }, {\n                prefix: 7,\n                buffer: Buffer.from([0, 1])\n            }, {\n                prefix: 7,\n                buffer: Buffer.from([3, 5, 7])\n            }],\n            buffer_1: Buffer.from([0, 0]),\n            buffer_2: Buffer.from([5, 6])\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-terminated-buffer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "test/corrode-terminated-buffer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-terminated-buffer.test.js~describe148",
    "access": null,
    "description": "Corrode#terminatedBuffer",
    "lineNumber": 5,
    "testTargets": [
      "Corrode#terminatedBuffer"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/corrode-terminated-buffer.test.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-buffer.test.js~describe148.it149",
    "access": null,
    "description": "retrieves a terminated buffer",
    "lineNumber": 12
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/corrode-terminated-buffer.test.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-buffer.test.js~describe148.it150",
    "access": null,
    "description": "retrieves a terminated buffer spanned over multiple buffers",
    "lineNumber": 23
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/corrode-terminated-buffer.test.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-buffer.test.js~describe148.it151",
    "access": null,
    "description": "retrieves a terminated buffer spanned over multiple buffers with options",
    "lineNumber": 34
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/corrode-terminated-buffer.test.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-buffer.test.js~describe148.it152",
    "access": null,
    "description": "retrieves a terminated buffer in a complex parser",
    "lineNumber": 49
  },
  {
    "__docId__": 357,
    "kind": "testFile",
    "name": "test/corrode-terminated-string.test.js",
    "content": "const { expect } = require('chai');\nconst Corrode = require('../src');\n\n/** @test {Corrode#terminatedString} */\ndescribe('Corrode#terminatedString', () => {\n    beforeEach(function(){\n        this.base = new Corrode();\n        this.eqArray = require('./helpers/asserts').eqArray.bind(this);\n        this.eqMultiArray = require('./helpers/asserts').eqMultiArray.bind(this);\n    });\n\n    it('retrieves a terminated string', function(done){\n        this.base\n            .terminatedString('string_1')\n            .terminatedString('string_2')\n            .terminatedString('string_3');\n\n        this.eqArray([0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x6f, 0x6f], done, {\n            string_1: 'hello',\n            string_2: ', world',\n            string_3: ''\n        });\n    });\n\n    it('retrieves a terminated string spanned over multiple buffers', function(done){\n        this.base\n            .terminatedString('string_1')\n            .terminatedString('string_2')\n            .terminatedString('string_3');\n\n        this.eqMultiArray([[0x68, 0x65], [0x6c], [0x6c, 0x6f, 0x00], [0x2c], [0x20, 0x77], [0x6f, 0x72], [0x6c], [0x64], [0x00, 0x6f, 0x6f]], done, {\n            string_1: 'hello',\n            string_2: ', world',\n            string_3: ''\n        });\n    });\n\n    it('retrieves a terminated string with options', function(done){\n        this.base\n            .terminatedString('string_1', 0x2c)\n            .terminatedString('string_2', 0x64, false)\n            .terminatedString('string_3');\n\n        this.eqMultiArray([[0x68, 0x65], [0x6c], [0x6c, 0x6f], [0x2c], [0x20, 0xe2, 0x9a, 0xa1, 0x20, 0x77], [0x6f, 0x72], [0x6c], [0x64], [0x00, 0x6f, 0x6f]], done, {\n            string_1: 'hello',\n            string_2: ' ⚡ world',\n            string_3: ''\n        });\n    });\n\n    it('accepts custom encoding', function(done){\n        this.base.terminatedString('string', 0, true, 'ascii');\n\n        this.eqArray([0xe2, 0x9a, 0xa1, 0x00], done, {\n            string: 'b\\u001a!'\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/corrode-terminated-string.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/corrode-terminated-string.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/corrode-terminated-string.test.js~describe153",
    "access": null,
    "description": "Corrode#terminatedString",
    "lineNumber": 5,
    "testTargets": [
      "Corrode#terminatedString"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/corrode-terminated-string.test.js~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-string.test.js~describe153.it154",
    "access": null,
    "description": "retrieves a terminated string",
    "lineNumber": 12
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/corrode-terminated-string.test.js~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-string.test.js~describe153.it155",
    "access": null,
    "description": "retrieves a terminated string spanned over multiple buffers",
    "lineNumber": 25
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/corrode-terminated-string.test.js~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-string.test.js~describe153.it156",
    "access": null,
    "description": "retrieves a terminated string with options",
    "lineNumber": 38
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/corrode-terminated-string.test.js~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "test/corrode-terminated-string.test.js~describe153.it157",
    "access": null,
    "description": "accepts custom encoding",
    "lineNumber": 51
  },
  {
    "__docId__": 363,
    "kind": "testFile",
    "name": "test/map.test.js",
    "content": "const expect = require('chai').expect;\nconst fixture = require('./fixtures/vars');\nconst map = require('../src/map');\n\ndescribe('Map', () => {\n    beforeEach(function(){\n        this.fixture = fixture.clone();\n\n        this.map = function(fn, on, ...args){\n            map[fn].call({ vars: this.fixture }, on, ...args);\n            return this.fixture[on];\n        };\n    });\n\n    /** @test {map} */\n    it('maps via callback', function(){\n        expect(this.map('callback', 'number', val => val * 2)).to.equal(fixture.number * 2);\n    });\n\n    /** @test {get} */\n    it('maps via get - array', function(){\n        expect(this.map('get', 'zero', ['fixture'])).to.equal('fixture');\n        expect(this.map('get', 'one', [0, {}])).to.be.object;\n        expect(this.map('get', 'two', [0, 0, {}])).to.be.empty;\n    });\n\n    /** @test {get} */\n    it('maps via get - object', function(){\n        expect(this.map('get', 'string', { fixture: 'string' })).to.equal('string');\n        expect(this.map('get', 'string2', { fixture: {} })).to.be.object;\n    });\n\n    /** @test {findAll} */\n    it('maps via findAll', function(){\n        expect(this.map('findAll', 'one', fixture.objectArray, 'id')).to.deep.equal([fixture.objectArray[0]]);\n        expect(this.map('findAll', 'two', fixture.objectArray, 'id')).to.have.length.of(2);\n        expect(this.map('findAll', 'id', fixture.objectArray, 'id')[0].name).to.equal('quxbaz');\n        expect(this.map.bind(this, 'findAll', 'three', fixture.objectArray, 'id')).to.throw(Error);\n    });\n\n    /** @test {find} */\n    it('maps via find', function(){\n        expect(this.map('find', 'one', fixture.objectArray, 'id')).to.deep.equal(fixture.objectArray[0]);\n        expect(this.map('find', 'id', fixture.objectArray, 'id').name).to.equal('quxbaz');\n        expect(this.map.bind(this, 'find', 'three', fixture.objectArray, 'id')).to.throw(Error);\n    });\n\n    /** @test {abs} */\n    it('maps via abs', function(){\n        expect(this.map('abs', 'negative')).to.equal(1);\n        expect(this.map('abs', 'two')).to.equal(2);\n    });\n\n    /** @test {invert} */\n    it('maps via invert', function(){\n        expect(this.map('invert', 'negative')).to.equal(1);\n        expect(this.map('invert', 'three')).to.equal(-3);\n    });\n\n    /** @test {trim} */\n    it('maps via trim', function(){\n        expect(this.map('trim', 'untrimmed')).to.equal(fixture.trimmed);\n        expect(this.map('trim', 'trimmed')).to.equal(fixture.trimmed);\n    });\n\n    /** @test {push} */\n    it('pushes', function(){\n        let that = { vars: fixture.clone() };\n        map.push.call(that, 'object');\n        expect(that.vars).to.deep.equal(fixture.object);\n    });\n\n    /** @test {bitmask} */\n    it('maps via bitmask', function(){\n        expect(this.map('bitmask', 'bitmaskMatch', {\n            isX80: 0x80,\n            isX40: 0x40,\n            isX20: 0x20,\n            isX10: 0x10,\n            isX08: 0x08,\n            isX04: 0x04,\n            isX02: 0x02,\n            isX01: 0x01\n        })).to.deep.equal({\n            isX80: true,\n            isX40: false,\n            isX20: true,\n            isX10: true,\n            isX08: true,\n            isX04: true,\n            isX02: true,\n            isX01: false\n        });\n    });\n\n    /** @test {bitmask} */\n    it('maps single values via bitmask', function(){\n        expect(this.map('bitmask', 'bitmaskMatch', 0x80)).to.be.true;\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/map.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "test/map.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/map.test.js~describe158",
    "access": null,
    "description": "Map",
    "lineNumber": 5
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it159",
    "access": null,
    "description": "maps via callback",
    "lineNumber": 16,
    "testTargets": [
      "map"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it160",
    "access": null,
    "description": "maps via get - array",
    "lineNumber": 21,
    "testTargets": [
      "get"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it161",
    "access": null,
    "description": "maps via get - object",
    "lineNumber": 28,
    "testTargets": [
      "get"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it162",
    "access": null,
    "description": "maps via findAll",
    "lineNumber": 34,
    "testTargets": [
      "findAll"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it163",
    "access": null,
    "description": "maps via find",
    "lineNumber": 42,
    "testTargets": [
      "find"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it164",
    "access": null,
    "description": "maps via abs",
    "lineNumber": 49,
    "testTargets": [
      "abs"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it165",
    "access": null,
    "description": "maps via invert",
    "lineNumber": 55,
    "testTargets": [
      "invert"
    ]
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it166",
    "access": null,
    "description": "maps via trim",
    "lineNumber": 61,
    "testTargets": [
      "trim"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it167",
    "access": null,
    "description": "pushes",
    "lineNumber": 67,
    "testTargets": [
      "push"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it168",
    "access": null,
    "description": "maps via bitmask",
    "lineNumber": 74,
    "testTargets": [
      "bitmask"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/map.test.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.test.js~describe158.it169",
    "access": null,
    "description": "maps single values via bitmask",
    "lineNumber": 97,
    "testTargets": [
      "bitmask"
    ]
  },
  {
    "__docId__": 376,
    "kind": "testFile",
    "name": "test/utils.test.js",
    "content": "const expect = require('chai').expect;\nconst utils = require('../src/utils');\n\ndescribe('Utils', () => {\n    beforeEach(function(){\n        this.context = {\n            fixture: 'fixture'\n        };\n    });\n\n    /** @test {tapBindObject} */\n    it('binds object with tap', function(){\n        let boundFixture = utils.tapBindObject({\n            fnFixture: function(argOne, argTwo){\n                expect(argOne).to.equal('foo');\n                expect(argTwo).to.equal('bar');\n            }\n        }, {\n            tap: function(fn){\n                return fn;\n            },\n            ...this.context\n        });\n\n        boundFixture.fnFixture('foo', 'bar')();\n    });\n\n    /** @test {bindObject} */\n    it('binds object with data', function(){\n        let obj = {\n            fnFixture: function(){\n                expect(this).to.not.be.empty;\n                expect(this.fixture).to.equal('fixture');\n            },\n            fnEmpty: function(){\n                expect(this).to.be.empty;\n            }\n        };\n\n        let boundFixture = utils.bindObject(obj, this.context);\n        boundFixture.fnFixture();\n\n        let boundObj = utils.bindObject(obj, {});\n        boundObj.fnEmpty();\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/utils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "test/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils.test.js~describe170",
    "access": null,
    "description": "Utils",
    "lineNumber": 4
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/utils.test.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.test.js~describe170.it171",
    "access": null,
    "description": "binds object with tap",
    "lineNumber": 12,
    "testTargets": [
      "tapBindObject"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/utils.test.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.test.js~describe170.it172",
    "access": null,
    "description": "binds object with data",
    "lineNumber": 29,
    "testTargets": [
      "bindObject"
    ]
  },
  {
    "__docId__": 380,
    "kind": "testFile",
    "name": "test/variable-stack.test.js",
    "content": "const expect = require('chai').expect;\nconst VarStack = require('../src/variable-stack');\n\n/** @test {VariableStack} */\ndescribe('VariableStack', () => {\n    beforeEach(function(){\n        this.stack = new VarStack();\n    });\n\n    /** @test {VariableStack} */\n    it('starts as an empty object', function(){\n        expect(this.stack.stack).to.have.length.of(1);\n        expect(this.stack.top.isRoot).to.be.true;\n        expect(this.stack.value).to.be.object;\n        expect(this.stack.value).to.be.empty;\n    });\n\n    /** @test {VariableStack#constructor} */\n    it('allows properties on layer 0', function(){\n        this.stack.value.foo = 'bar';\n        expect(this.stack.value.foo).to.equal('bar');\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#top}\n     * @test {VariableStack#value}\n     */\n    it('allows object-descension', function(){\n        this.stack.push('child');\n        expect(this.stack.value).to.be.object;\n        expect(this.stack.value).to.be.empty;\n        expect(this.stack.top.name).to.equal('child');\n        expect(this.stack.top.isRoot).to.be.false;\n    });\n\n    /** @test {VariableStack#push} */\n    it('haves correct value-shortcut', function(){\n        this.stack.push('child');\n        this.stack.value.val = 'fixture';\n        expect(this.stack.value).to.deep.equal(this.stack.top.value);\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows deep-adding', function(){\n        this.stack.push('child');\n        this.stack.value.fixture = 'fixture';\n        expect(this.stack.value.fixture).to.equal('fixture');\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#pop}\n     */\n    it('allows object-popping', function(){\n        this.stack.push('child');\n        this.stack.pop();\n        expect(this.stack.top.isRoot).to.be.true;\n        expect(this.stack.value.child).to.be.object;\n        expect(this.stack.value.child).to.be.empty;\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#pop}\n     */\n    it('allows object-popping with values', function(){\n        this.stack.push('child');\n        this.stack.value.fixture = 'fixture';\n        this.stack.pop();\n        expect(this.stack.value.child.fixture).to.equal('fixture');\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#pop}\n     */\n    it('allows multiple pushed objects', function(){\n        this.stack.push('child-1');\n        this.stack.value.fixture = 'fixture-1';\n        this.stack.pop();\n\n        this.stack.push('child-2');\n        this.stack.value.fixture = 'fixture-2';\n        this.stack.pop();\n\n        expect(Object.keys(this.stack.value)).to.have.length.of(2);\n        expect(this.stack.value['child-1']).to.be.object;\n        expect(this.stack.value['child-1']).to.not.be.empty;\n        expect(this.stack.value['child-2']).to.be.object;\n        expect(this.stack.value['child-2']).to.not.be.empty;\n        expect(this.stack.value['child-1'].fixture).to.equal('fixture-1');\n        expect(this.stack.value['child-2'].fixture).to.equal('fixture-2');\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#pop}\n     */\n    it('allows object-repushing', function(){\n        this.stack.push('child');\n        this.stack.value.val = 'fixture';\n        this.stack.pop();\n        this.stack.push('child');\n        expect(this.stack.value).to.not.be.empty;\n        expect(this.stack.value.val).to.equal('fixture');\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows array-repushing', function(){\n        this.stack.push('child', []);\n        this.stack.value.push('fixture');\n        this.stack.pop();\n        this.stack.push('child');\n        expect(this.stack.value).to.not.be.empty;\n        expect(this.stack.value[0]).to.equal('fixture');\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows primitive-repushing', function(){\n        this.stack.push('child', 2);\n        this.stack.value *= 2;\n        this.stack.pop();\n        this.stack.push('child');\n        expect(this.stack.value).to.equal(4);\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#pop}\n     */\n    it('repushes the same instance', function(){\n        this.stack.push('child-1');\n        this.stack.value.val = 'fixture';\n        expect(this.stack.peek()['child-1']).to.equal(this.stack.value);\n        expect(this.stack.peek()['child-1'].val).to.equal(this.stack.value.val);\n\n        this.stack.pop();\n        this.stack.push('child-2', []);\n        this.stack.pop();\n        expect(this.stack.value['child-2']).to.be.array;\n        expect(this.stack.value['child-2']).to.be.empty;\n    });\n\n    /**\n     * @test {VariableStack#push}\n     * @test {VariableStack#value}\n     */\n    it('allows object-repushing on user-defined objects', function(){\n        this.stack.value.child = { val: 'fixture' };\n        this.stack.push('child');\n        expect(this.stack.value).to.not.be.empty;\n        expect(this.stack.value.val).to.equal('fixture');\n    });\n\n    /**\n     * @test {VariableStack#peek}\n     * @test {VariableStack#peekLayer}\n     * @test {VariableStack#popAll}\n     */\n    it('allows layer-peeking & allPop', function(){\n        this.stack.push('child');\n        this.stack.value.val = 'val'\n        expect(this.stack.peekLayer().isRoot).to.be.true;\n        expect(this.stack.peek().child.val).to.equal('val');\n        expect(this.stack.peek(0).val).to.equal('val');\n\n        this.stack.push('child');\n        expect(this.stack.peekLayer().isRoot).to.be.false;\n        expect(this.stack.peekLayer(2).isRoot).to.be.true;\n\n        this.stack.push('child');\n        expect(this.stack.peekLayer().isRoot).to.be.false;\n        expect(this.stack.peekLayer(2).isRoot).to.be.false;\n        expect(this.stack.peekLayer(3).isRoot).to.be.true;\n\n        this.stack.push('child');\n        this.stack.value.fixture = 'fixture';\n        expect(this.stack.peekLayer().isRoot).to.be.false;\n        expect(this.stack.peekLayer(2).isRoot).to.be.false;\n        expect(this.stack.peekLayer(3).isRoot).to.be.false;\n        expect(this.stack.peekLayer(4).isRoot).to.be.true;\n\n        this.stack.popAll();\n        expect(this.stack.top.isRoot).to.be.true;\n        expect(this.stack.value).to.not.be.empty;\n        expect(this.stack.value.child.child.child.child.fixture).to.equal('fixture');\n    });\n\n    /** @test {VariableStack#peek} */\n    it('properly supports layer-peeking', function(){\n        this.stack.push('child1');\n        this.stack.value.val = 'val-1';\n        this.stack.pop();\n\n        this.stack.push('child2');\n        this.stack.value.val = 'val-2';\n        this.stack.pop();\n\n        this.stack.push('child3');\n        this.stack.value.val = 'val-3';\n        expect(this.stack.peek().child1.val).to.equal('val-1');\n        expect(this.stack.peek().child2.val).to.equal('val-2');\n\n        this.stack.push('child31');\n        this.stack.value.val = 'val-3-1';\n        expect(this.stack.peek().val).to.equal('val-3');\n        expect(this.stack.peek(2).child1.val).to.equal('val-1');\n        expect(this.stack.peek(2).child2.val).to.equal('val-2');\n\n        this.stack.push('child311');\n        expect(this.stack.peek(3).child1.val).to.equal('val-1');\n    });\n\n    /** @test {VariableStack#pop} */\n    it('prevents invalid popping', function(){\n        expect(this.stack.pop.bind(this.stack)).to.throw(ReferenceError);\n\n        this.stack.push('child');\n        expect(this.stack.pop.bind(this.stack)).to.not.throw(ReferenceError);\n    });\n\n    /** @test {VariableStack#peek} */\n    it('prevents invalid peeking', function(){\n        expect(this.stack.peek.bind(this.stack)).to.throw(ReferenceError);\n\n        this.stack.push('child');\n        expect(this.stack.peek.bind(this.stack)).to.not.throw(ReferenceError);\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows array pushing', function(){\n        this.stack.push('child', []);\n        this.stack.value.push('fixture');\n\n        expect(this.stack.value).to.be.array;\n        expect(this.stack.value).to.have.length.of(1);\n\n        this.stack.pop();\n        expect(this.stack.value.child[0]).to.equal('fixture');\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows full primitive value-replacing', function(){\n        this.stack.push('child');\n        this.stack.value = 'fixture';\n\n        expect(this.stack.value).to.equal('fixture');\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows full object value-replacing', function(){\n        this.stack.push('child');\n        this.stack.value.fixture = 'fixture';\n\n        this.stack.value = {};\n        expect(this.stack.value).to.be.empty;\n    });\n\n    /** @test {VariableStack#push} */\n    it('allows full array value-replacing', function(){\n        this.stack.push('child', []);\n        this.stack.value.push('fixture');\n\n        this.stack.value = [];\n        expect(this.stack.value).to.be.empty;\n    });\n\n    /** @test {VariableStack#set} */\n    it('updates the parent-layers value', function(){\n        this.stack.push('child', 10);\n        this.stack.value = 20;\n        expect(this.stack.peek().child).to.equal(20);\n\n        this.stack.pop();\n        expect(this.stack.value.child).to.equal(20);\n    });\n});\n",
    "static": true,
    "longname": "/Users/screeny/src/corrode/test/variable-stack.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/variable-stack.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173",
    "access": null,
    "description": "VariableStack",
    "lineNumber": 5,
    "testTargets": [
      "VariableStack"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it174",
    "access": null,
    "description": "starts as an empty object",
    "lineNumber": 11,
    "testTargets": [
      "VariableStack"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it175",
    "access": null,
    "description": "allows properties on layer 0",
    "lineNumber": 19,
    "testTargets": [
      "VariableStack#constructor"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it176",
    "access": null,
    "description": "allows object-descension",
    "lineNumber": 29,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#top",
      "VariableStack#value"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it177",
    "access": null,
    "description": "haves correct value-shortcut",
    "lineNumber": 38,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it178",
    "access": null,
    "description": "allows deep-adding",
    "lineNumber": 45,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it179",
    "access": null,
    "description": "allows object-popping",
    "lineNumber": 55,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it180",
    "access": null,
    "description": "allows object-popping with values",
    "lineNumber": 67,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it181",
    "access": null,
    "description": "allows multiple pushed objects",
    "lineNumber": 78,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it182",
    "access": null,
    "description": "allows object-repushing",
    "lineNumber": 100,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it183",
    "access": null,
    "description": "allows array-repushing",
    "lineNumber": 110,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it184",
    "access": null,
    "description": "allows primitive-repushing",
    "lineNumber": 120,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it185",
    "access": null,
    "description": "repushes the same instance",
    "lineNumber": 132,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it186",
    "access": null,
    "description": "allows object-repushing on user-defined objects",
    "lineNumber": 149,
    "testTargets": [
      "VariableStack#push",
      "VariableStack#value"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it187",
    "access": null,
    "description": "allows layer-peeking & allPop",
    "lineNumber": 161,
    "testTargets": [
      "VariableStack#peek",
      "VariableStack#peekLayer",
      "VariableStack#popAll"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it188",
    "access": null,
    "description": "properly supports layer-peeking",
    "lineNumber": 191,
    "testTargets": [
      "VariableStack#peek"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it189",
    "access": null,
    "description": "prevents invalid popping",
    "lineNumber": 216,
    "testTargets": [
      "VariableStack#pop"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it190",
    "access": null,
    "description": "prevents invalid peeking",
    "lineNumber": 224,
    "testTargets": [
      "VariableStack#peek"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it191",
    "access": null,
    "description": "allows array pushing",
    "lineNumber": 232,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it192",
    "access": null,
    "description": "allows full primitive value-replacing",
    "lineNumber": 244,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it193",
    "access": null,
    "description": "allows full object value-replacing",
    "lineNumber": 252,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it194",
    "access": null,
    "description": "allows full array value-replacing",
    "lineNumber": 261,
    "testTargets": [
      "VariableStack#push"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/variable-stack.test.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/variable-stack.test.js~describe173.it195",
    "access": null,
    "description": "updates the parent-layers value",
    "lineNumber": 270,
    "testTargets": [
      "VariableStack#set"
    ]
  }
]